{"device":"DESKTOP","widgets":{"productsTable":{"t":"Table","lX":80,"lY":140,"sX":6.71,"sY":6.54,"s":"Manage Products","ps":{"enabled":"true","scalingType":"OK","width":"50% - 200px","height":"100% - 220px","x":"80px","y":"140px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"name,expiry,weight per block","selectable":"multi","display header":"true","title":"All Products","form id":"products","form key":"all","enable search":"true","colWidths":"0.40034364261168387,0.15979381443298968,0.3539518900343643","auto scroll":"false"},"ev":{"clientEvents":{"inputEvents":{"New Event #1":{"channel":"masterDelRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{}}}},"companyProductsTable":{"t":"Table","lX":765,"lY":140,"sX":8.12,"sY":6.54,"s":"Manage Products","ps":{"enabled":"true","scalingType":"OK","width":"50% - 60px","height":"100% - 220px","x":"50% - 20px","y":"140px"},"ver":"190104c210519","dis":false,"tt":"","a":{"columns":"name,created on,created by,expiry,weight per block","selectable":"multi + single","text color":"#000000","row color":"#000000","display header":"true","title":"Company Products","form id":"products","form key":"company","enable search":"true","colWidths":"0.18698060941828254,0.18698060941828254,0.18421052631578946,0.13434903047091412,0.23822714681440443"},"ev":{"clientEvents":{"inputEvents":{"Delete Rows":{"channel":"compDelRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Select Row":{"channel":"selectCompRow/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"Icon#0":{"t":"Icon","lX":1953,"lY":85,"sX":1,"sY":1,"s":"Manage Products","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"5.2%","x":"100% - 430px","y":"85px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"plus-square"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"newProdIcon/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"companyDropdown":{"t":"Dropdown","lX":2005,"lY":70,"sX":3,"sY":1,"s":"Manage Products","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"6.26%","x":"100% - 378px","y":"70px"},"ver":"190104c210519","dis":false,"tt":"","a":{"label text":"Company","default options":"","form id":"products","form key":"compDrop"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"compSelected/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"Container#1":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Manage Products","ps":{"enabled":"true","scalingType":"OK","width":"100%- 80px","height":"100%- 80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"Manage Company Products","color":"grey"},"ev":{}},"addToCompanyProducts":{"t":"Button","lX":1074,"lY":300,"sX":0.7,"sY":0.87,"s":"Manage Products","ps":{"enabled":"true","scalingType":"OK","width":"70px","height":"40px","x":"50% - 110px","y":"300px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":">>","color":"grey"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"addCompanyProducts/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addToProducts":{"t":"Button","lX":1074,"lY":370,"sX":0.7,"sY":0.87,"s":"Manage Products","ps":{"enabled":"true","scalingType":"OK","width":"70px","height":"40px","x":"50% - 110px","y":"370px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"<<","color":"grey"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"removeCompanyProducts/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"manageProductScript":{"t":"Scripting","lX":40,"lY":785,"sX":1,"sY":1,"s":"Manage Products","ps":{"enabled":"false","scalingType":"OK","width":"5.74%","height":"11.44%","x":"6.31%","y":"66.36%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","file name":"../../js/settings/manage products/manageProducts.js","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var productCollection;\n var compProductCollection;\n var currentCompany;\n\n const maxUnixtime = 2147483647;\n \n var companyProductClone;\n const productsTable = Script.getWidget(\"productsTable\");\n const compProductsTable = Script.getWidget(\"companyProductsTable\");\n const compDropdown = Script.getWidget(\"companyDropdown\");\n \n Script.on(\"init\", function () {\n     Client.setScreenVisible(\"Edit Product\", false);\n     Client.setScreenVisible(\"Edit User Role\", false);\n     Client.setScreenVisible(\"Edit Error Codes\", false);\n     Client.setScreenVisible(\"Edit Company\", false);\n     Client.setScreenVisible(\"Edit Application Settings\", false);\n     Client.setScreenVisible(\"Edit Model Type\", false);\n     Client.setScreenVisible(\"Edit Model\", false);\n     Client.setScreenVisible(\"Edit User Access Role\", false);\n });\n \n Script.on('load', function () {\n     Database.readRecords(\"rodent\", \"Companies\", function (eventData) {\n         let companyCollection = SensaCollection.load(eventData.value);\n \n         Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n             let userCollection = SensaCollection.load(eventData.value);\n             let filteredUsers = userCollection.query((record, pk) => {\n                 if (record['User'] == Client.getUser()) {\n                     return true;\n                 }\n             });\n             var userCompanies = filteredUsers.getColumn(\"CompanyId\");\n \n             let filteredCompanies = companyCollection.query((record, pk) => {\n                 //if (userCompanies.includes(pk)) {\n                 return true;\n                 //}\n             });\n \n             let compNames = filteredCompanies.getColumn(\"Name\");\n             let compLoc = filteredCompanies.getColumn(\"Address\");\n             let compIds = filteredCompanies.getColumn(\"Id\");\n \n             // Get from state if coming back from editing/creating\n             currentCompany = Script.getState(\"currentCompany\");\n             if (currentCompany == null) {\n                 currentCompany = compIds[0];\n             }\n \n \n             let compObj = {};\n             compIds.map((comp, idx) => {\n                 compObj[comp] = compNames[idx] + \", \" + compLoc[idx];\n             });\n \n             Object.keys(compObj).forEach((comp, idx) => {\n                 filteredCompanies.set({ \"Id\": comp, \"Name\": compObj[comp] });\n             });\n \n             filteredCompanies.renameColumn(\"Name\", \"text\");\n             filteredCompanies.renameColumn(\"Id\", \"value\");\n \n             compDropdown.receiveTextValues(filteredCompanies);\n             compDropdown.receiveValue(compObj[currentCompany]);\n \n             Database.readRecords(\"rodent\", \"CompanyProducts\", function (eventData) {\n                 compProductCollection = SensaCollection.load(eventData.value);\n\n                 for(let key in compProductCollection.data) {\n                     var createdOn = compProductCollection.data[key][5];\n                     var updateOn = compProductCollection.data[key][6];\n                    //console.log(\"Created \" + createdOn + \" updated \" + updateOn)\n                     if(!isNaN(createdOn) && createdOn !== null  && createdOn !== \"\") {\n                         var date = parseInt(createdOn) * 1000;\n                         compProductCollection.data[key][5] = formatDate(date);\n                     } \n\n                     if(!isNaN(updateOn) && updateOn !== null  && updateOn !== \"\") {\n                        var date = parseInt(updateOn) * 1000;\n                        compProductCollection.data[key][6] = formatDate(date);\n                     }\n\n                 }\n                 updateTable();\n             });\n         });\n     });\n \n     Database.readRecords(\"rodent\", \"Products\", function (eventData) {\n         productCollection = SensaCollection.load(eventData.value);\n         let filteredComps = productCollection.query((record, pk) => {\n             if (record['Status'] == '1') {\n                 return true;\n             }\n         });\n\n         for(let key in filteredComps.data) {\n            var createdOn = filteredComps.data[key][5];\n            var updateOn = filteredComps.data[key][6];\n           //console.log(\"Created \" + createdOn + \" updated \" + updateOn)\n            if(!isNaN(createdOn) && createdOn !== null  && createdOn !== \"\") {\n                var date = parseInt(createdOn) * 1000;\n                filteredComps.data[key][5] = formatDate(date);\n            } \n\n            if(!isNaN(updateOn) && updateOn !== null  && updateOn !== \"\") {\n                var date = parseInt(updateOn) * 1000;\n                filteredComps.data[key][6] = formatDate(date);\n            }\n\n        }\n         filteredComps.renameColumn(\"WeightPerBlock\", \"Weight Per Block\");\n         ClientEvents.publish(\"masterDelRows\", \"\");\n         //console.log(\"Working table object: \" + JSON.stringify(filteredComps,null, 4));\n         productsTable.receiveValue(filteredComps);\n     });\n });\n \n ClientEvents.subscribe(\"addCompanyProducts\", addProductToCompany);\n ClientEvents.subscribe(\"removeCompanyProducts\", removeProductFromCompany);\n ClientEvents.subscribe(\"compSelected\", changeCompany);\n ClientEvents.subscribe(\"selectCompRow\", editProduct);\n ClientEvents.subscribe(\"newProdIcon\", createNewProduct);\n \n function addProductToCompany() {\n     var formData = Script.getFormByKey(\"products\");\n     var compData = formData.all;\n     //compData.renameColumn(\"Weight Per Block\", \"WeightPerBlock\");\n     //console.log(\"Data in the compound table \" + JSON.stringify(compData, null, 4));\n     compData.addColumn(\"companyid\");\n \n     var dbReq = {};\n     var compProdCount = Object.keys(compProductCollection.data).length;\n     let today = new Date().getTime();\n\n     // unix time\n     today = Math.floor(today / 1000);\n     //console.log(\"Created data is \" + today + \" l \" + JSON.stringify(today, null, 4));\n     //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n \n     compData.forEach(function (kvpair, pk) {\n         var prodObj = {};\n         // Check if product already exists with status = 0\n         let matchingProd = compProductCollection.query((record, pk) => {\n             if ((record['CompanyId'] == Script.getFormByKey(\"products\").compDrop) &&\n                 (record['Name'] == kvpair.name) &&\n                 (record['Expiry'] == kvpair.expiry) &&\n                 (record['WeightPerBlock'] == kvpair.weightperblock) &&\n                 (record['Status'] == '0')) {\n                 return true;\n             }\n         });\n         if (Object.keys(matchingProd.data).length > 0) {\n             // found match, override\n             prodObj.Id = Object.keys(matchingProd.data)[0];\n \n         } else {\n             prodObj.Id = `${++compProdCount}`;\n         }\n         prodObj.Name = kvpair.name;\n         prodObj.Owner = kvpair.owner;\n         prodObj.Status = kvpair.status;\n         prodObj.CreatedOn = today;\n         prodObj.UpdatedOn = today;\n         prodObj.CreatedBy = Client.getUser();\n         prodObj.UpdatedBy = Client.getUser();\n         prodObj.CompanyId = formData.compDrop;\n         prodObj.Expiry = kvpair.expiry;\n         prodObj.LowerThreshold = kvpair.lowerthreshold;\n         prodObj.UpperThreshold = kvpair.upperthreshold;\n         prodObj.WeightPerBlock = kvpair.weightperblock;\n         dbReq[prodObj.Id] = prodObj;\n     });\n     Database.saveRecord(\"rodent\", \"CompanyProducts\", dbReq, () => {\n         Database.readRecords(\"rodent\", \"CompanyProducts\", function (eventData) {\n             compProductCollection = SensaCollection.load(eventData.value);\n\n             for(let key in compProductCollection.data) {\n                var createdOn = compProductCollection.data[key][5];\n                var updateOn = compProductCollection.data[key][6];\n               //console.log(\"Created \" + createdOn + \" updated \" + updateOn)\n                if(!isNaN(createdOn) && createdOn !== null  && createdOn !== \"\") {\n                    var date = parseInt(createdOn) * 1000;\n                    compProductCollection.data[key][5] = formatDate(date);\n                } \n\n                if(!isNaN(updateOn) && updateOn !== null  && updateOn !== \"\") {\n                   var date = parseInt(updateOn) * 1000;\n                   compProductCollection.data[key][6] = formatDate(date);\n                }\n\n            }\n             updateTable();\n         });\n     });\n }\n \n function updateTable() {\n     let filteredComps = compProductCollection.query((record, pk) => {\n         if ((record['CompanyId'] == currentCompany) &&\n             (record['Status'] == '1')) {\n             //record['CreatedOn'] = formatDate(record['CreatedOn']);\n             //console.log(\"Created \" + JSON.stringify(record['CreatedOn'], null, 4) + \" typw \" + typeof record['CreatedOn']);\n             // if (!isNaN(record['CreatedOn']) ) {\n             //      record['CreatedOn'] = formatDate(record['CreatedOn']);\n             //     console.log(\"Created \" + JSON.stringify(record['CreatedOn'], null, 4));\n             //     record['CreatedOn'] = formatDate(record['CreatedOn']);\n             // }\n             \n             return true;\n         }\n     });\n \n     //companyProductClone = compProductCollection.clone();\n     for (const key in filteredComps.data) {\n         var date = filteredComps.data[key][5];\n         console.log(\"Data is \" + date);\n         if(!isNaN(date) && date !== undefined && date !== \"\") {\n             console.log(\"Data is 2  \" + date);\n             filteredComps.data[key][5] = formatDate(date);\n         }\n     }\n     ///console.log(\"DATa is \" + JSON.stringify(compProductCollection, null, 4));\n \n \n \n     //console.log(\"Data in the compound is \" + JSON.stringify(filteredComps, null, 4));\n     //console.log(\"#1 data in the compound is \" + JSON.stringify(filteredComps, null, 4));\n     filteredComps.renameColumn(\"CreatedOn\", \"Created On\");\n     filteredComps.renameColumn(\"CreatedBy\", \"Created By\");\n     filteredComps.renameColumn(\"WeightPerBlock\", \"Weight Per Block\");\n     //console.log(\"#2 data in the compound is \" + JSON.stringify(filteredComps, null, 4));\n     //filteredComps.renameColumn(\"CreatedOn\", \"Created On\");\n     ClientEvents.publish(\"compDelRows\", \"\");\n \n     compProductsTable.receiveValue(filteredComps);\n }\n \n function removeProductFromCompany() {\n     var formData = Script.getFormByKey(\"products\");\n     var ids = formData.company.getColumn(\"id\");\n     for (var i = 0; i < ids.length; i++) {\n         compProductsTable.deleteRows(ids[i]);\n         let req = {};\n         req[{ \"Id\": ids[i], \"Status\": \"0\" }] = { \"Id\": ids[i], \"Status\": \"0\" };\n         Database.updateRecord(\"rodent\", \"CompanyProducts\", req);\n     }\n }\n \n async function changeCompany(selected) {\n     currentCompany = selected.value;\n \n     Database.readRecords(\"rodent\", \"CompanyProducts\", function (eventData) {\n         compProductCollection = SensaCollection.load(eventData.value);\n\n         for(let key in compProductCollection.data) {\n            var createdOn = compProductCollection.data[key][5];\n            var updateOn = compProductCollection.data[key][6];\n           //console.log(\"Created \" + createdOn + \" updated \" + updateOn)\n            if(!isNaN(createdOn) && createdOn !== null  && createdOn !== \"\") {\n                var date = parseInt(createdOn) * 1000;\n                compProductCollection.data[key][5] = formatDate(date);\n            } \n\n            if(!isNaN(updateOn) && updateOn !== null  && updateOn !== \"\") {\n               var date = parseInt(updateOn) * 1000;\n               compProductCollection.data[key][6] = formatDate(date);\n            }\n\n        }\n         Script.setState(\"currentCompany\", currentCompany);\n         updateTable();\n     });\n }\n \n function editProduct(eventData) {\n     var key = Object.keys(eventData.value.data)[0];\n     eventData.value.data[key][5] = compProductCollection.data[key][5];\n     console.log(\"Event data is \" + JSON.stringify(eventData.value, null, 4));\n     Script.setState(\"compProductInfo\", eventData.value);\n     Script.setState(\"masterProduct\", \"product\");\n     Script.setState(\"modifyType\", \"edit\");\n     Client.jumpToScreen(\"Edit Product\");\n }\n \n function createNewProduct(eventData) {\n     Script.setState(\"modifyType\", \"add\");\n     Script.setState(\"masterProduct\", \"product\");\n     Script.setState(\"companyId\", currentCompany);\n     Client.jumpToScreen(\"Edit Product\");\n }\n \n function formatDate(today) {\n \n     //return Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n     var date;\n     if(typeof today == \"number\") {\n        date = new Date(today).toLocaleString('en-GB');\n     } else {\n        date = new Date(parseInt(today)).toLocaleString('en-GB');\n     }\n     var d = date.split(\", \");\n     var d0 = d[0].split(\"/\");\n     //d0[2] = Math.abs(d0[2] - 2000);\n     d0 = d0.join(\"/\");\n     //return d[1] + \" \" + d0;\n     return d0 + \" \" + d[1].substring(0, 5);\n }"},"ev":{"serverEvents":{"inputEvents":{"database":{"channel":"$DB/ADMIN/MANAGE/RESPONSE","event":"feed"}}}}},"Scripting#8":{"t":"Scripting","lX":160,"lY":800,"sX":1,"sY":1,"s":"Manage Products","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Input#2":{"t":"Input","lX":80,"lY":100,"sX":3.5,"sY":1,"s":"Edit Product","ps":{"enabled":"true","scalingType":"NOVERT","width":"350px","height":"4.19%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"label text":"Name","color":"grey","form id":"editProduct","form key":"Name","required":"true"},"ev":{}},"Input#4":{"t":"Input","lX":80,"lY":200,"sX":3.5,"sY":1,"s":"Edit Product","ps":{"enabled":"true","scalingType":"NOVERT","width":"350px","height":"4.19%","x":"80px","y":"200px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"number","label text":"Weight Per Block","color":"grey","form id":"editProduct","form key":"WeightPerBlock","required":"true"},"ev":{}},"Input#5":{"t":"Input","lX":80,"lY":300,"sX":3.5,"sY":1,"s":"Edit Product","ps":{"enabled":"true","scalingType":"NOVERT","width":"350px","height":"4.19%","x":"80px","y":"300px"},"ver":"270520c210519","dis":false,"tt":"","a":{"label text":"Expiry","color":"grey","type":"number","form id":"editProduct","form key":"Expiry","required":"true"},"ev":{}},"Input#6":{"t":"Input","lX":80,"lY":380,"sX":1,"sY":1,"s":"Edit Product","ps":{"enabled":"true","scalingType":"NOVERT","width":"100px","height":"4.19%","x":"80px","y":"380px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","label text":"Enabled","color":"grey","checkbox label side":"right","form id":"editProduct","form key":"Status","default value":"1"},"ev":{}},"productFormContainer":{"t":"Container","lX":40,"lY":40,"sX":4.5,"sY":4.2,"s":"Edit Product","ps":{"enabled":"true","scalingType":"OK","width":"450px","height":"420px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Edit Product"},"ev":{}},"prodSubmitButton":{"t":"Button","lX":320,"lY":380,"sX":1,"sY":1.09,"s":"Edit Product","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"320px","y":"380px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","button name":"Save"},"ev":{"clientEvents":{"inputEvents":{},"outputEvents":{"submitEdit":{"channel":"finishEditProduct/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"masterProductsTable":{"t":"Table","lX":80,"lY":120,"sX":15.83,"sY":6.74,"s":"Manage Master Products","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% - 200px","x":"80px","y":"120px"},"ver":"190104c210519","dis":false,"tt":"","a":{"columns":"name,expiry,weight per block","text color":"#000000","row color":"#000000","selectable":"multi + single","form id":"master","form key":"products","title":"All Products","display header":"true","colWidths":"0.325078793336335,0.32687978388113464,0.3255290409725349"},"ev":{"clientEvents":{"inputEvents":{"New Event #1":{"channel":"compDelRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Selected Product":{"channel":"productSelected/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"deleteMasterProdIcon":{"t":"Icon","lX":2178,"lY":70,"sX":1,"sY":1,"s":"Manage Master Products","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"7.14%","x":"100% - 190px","y":"70px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"trash","outline color":"no outline","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"removeMasterProducts/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addMasterProdIcon":{"t":"Icon","lX":2238,"lY":70,"sX":1,"sY":1,"s":"Manage Master Products","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"5.2%","x":"100% - 130px","y":"70px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"plus-square"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"addNewMasterProduct/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"userRolesTable":{"t":"Table","lX":80,"lY":100,"sX":15.83,"sY":6.94,"s":"User Roles","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% - 180px","x":"80px","y":"100px"},"ver":"190104c210519","dis":false,"tt":"","a":{"form id":"roles","form key":"users","display header":"true","text color":"#000000","row color":"#000000","columns":"user,updated by,updated on,is admin,is primary","title":"User Roles","selectable":"multi + single","colWidths":"0.1922833649588868,0.19291587602783047,0.19734345351043645,0.1922833649588868,0.1935483870967742"},"ev":{"clientEvents":{"inputEvents":{"New Event #1":{"channel":"usrDelRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"New Event #2":{"channel":"userEdit/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"usersCompanyDropdown":{"t":"Dropdown","lX":1998,"lY":84,"sX":3,"sY":1,"s":"User Roles","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"6.26%","x":"100% - 385px","y":"84px"},"ver":"190104c210519","dis":false,"tt":"","a":{"default options":""},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"usrCcompSelected/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"Icon#1":{"t":"Icon","lX":2193,"lY":50,"sX":1,"sY":1,"s":"User Roles","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"5.08%","x":"100% - 190px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"trash","outline color":"no outline","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deleteUsers/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Scripting#7":{"t":"Scripting","lX":50,"lY":405,"sX":1,"sY":1,"s":"Edit User Role","ps":{"enabled":"false","scalingType":"OK","width":"4.2%","height":"7.9%","x":"16.07%","y":"49.45%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var userId;\n var modifyType;\n var companyId;\n var userData;\n \n const userFormContainer = Script.getWidget(\"userRoleContainer\");\n const userSubmitButton = Script.getWidget(\"userRoleSubmit\");\n const editUserSelect = Script.getWidget(\"editUserSelect\");\n const editUserCompSelect = Script.getWidget(\"editUserCompSelect\");\n const editUserIsAdmin = Script.getWidget(\"editUserIsAdmin\");\n //IsPrimaryCheck\n const IsPrimaryCheck = Script.getWidget(\"IsPrimaryCheck\");\n const cancelRoleButton = Script.getWidget(\"cancelRoleButton\");\n \n Script.on('load', function () {\n \n     //Script.setState(\"userRoleInfo\", eventData.value);\n     //console.log(\"User event data \" + JSON.stringify(eventData.value, null, 4));\n     //Script.setState(\"companyId\", currentCompany);\n     modifyType = Script.getState(\"modifyType\");\n     cancelRoleButton.subscribe(\"pressed\", () => {\n         Client.jumpToScreen(\"User Roles\");\n     });\n     if (modifyType == \"add\") {\n         userFormContainer.setTitle(\"New User Role\");\n \n         Database.readRecords(\"Directory\", \"users\", function (eventData) {\n             let userCollection = SensaCollection.load(eventData.value);\n             editUserSelect.receiveList(userCollection.getColumn(\"username\"));\n         });\n     } else if (modifyType == \"edit\") {\n         userData = Script.getState(\"userRoleInfo\");\n         //console.log(\"user role is \" + JSON.stringify(userData, null, 4));\n         userFormContainer.setTitle(\"Edit User Role\");\n         IsPrimaryCheck.receiveValue(userData.getColumn(\"is primary\")[0]);\n         editUserIsAdmin.receiveValue(userData.getColumn(\"is admin\")[0]);\n \n         //userFormContainer.setTitle(\"Edit User Role\");\n     }\n \n     Database.readRecords(\"rodent\", \"Companies\", function (eventData) {\n         let companyCollection = SensaCollection.load(eventData.value);\n         Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n             let userCollection = SensaCollection.load(eventData.value);\n             let filteredUsers = userCollection.query((record, pk) => {\n                 if (record['User'] == Client.getUser()) {\n                     return true;\n                 }\n             });\n             var userCompanies = filteredUsers.getColumn(\"CompanyId\");\n \n             let filteredCompanies = companyCollection;\n             // if a user is NOT an admin, only show the companies that the user is a part of\n             if (!(Client.getUser() == \"admin\" || Client.getUser() == \"devadmin@pestsense.com\")) {\n                 filteredCompanies = companyCollection.query((record, pk) => {\n                     if (userCompanies.includes(pk)) {\n                         return true;\n                     }\n                 });\n             }\n \n             let compNames = filteredCompanies.getColumn(\"Name\");\n             let compLoc = filteredCompanies.getColumn(\"Address\");\n             let compIds = filteredCompanies.getColumn(\"Id\");\n \n             companyId = Script.getState(\"companyId\");\n             if (companyId == null) {\n                 companyId = compIds[0];\n             }\n \n             let compObj = {};\n             compIds.map((comp, idx) => {\n                 compObj[comp] = compNames[idx] + \", \" + compLoc[idx];\n             });\n \n             Object.keys(compObj).forEach((comp, idx) => {\n                 filteredCompanies.set({ \"Id\": comp, \"Name\": compObj[comp] });\n             });\n \n             filteredCompanies.renameColumn(\"Name\", \"text\");\n             filteredCompanies.renameColumn(\"Id\", \"value\");\n \n             editUserCompSelect.receiveTextValues(filteredCompanies);\n             editUserCompSelect.receiveValue(filteredCompanies.get(companyId).text);\n             if (userData != undefined) {\n                 editUserSelect.receiveValue(userData.getColumn(\"user\")[0]);\n                 //Script.disableWidget(\"editUserSelect\");\n                 userId = userData.getColumn(\"id\")[0];\n             }\n         });\n     });\n });\n \n ClientEvents.subscribe(\"finishEditUser\", function () {\n     switch (modifyType) {\n         case 'edit':\n             handleEdit();\n             break;\n         case 'add':\n             handleCreate();\n             break;\n     }\n });\n \n function handleEdit() {\n     var formObj = Script.getFormByKey(\"editUser\");\n     if (formObj == undefined) {\n         alert(\"Please fill out all required fields\");\n         return;\n     }\n     var dbReq = {};\n     formObj.Id = userId;\n     let today = new Date().getTime() / 1000;\n     //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n     formObj.UpdatedOn = Math.floor(today);\n     formObj.UpdatedBy = Client.getUser();\n     formObj.IsAdmin = +formObj.IsAdmin;\n     formObj.IsPrimary = +formObj.IsPrimary;\n     dbReq[userId] = formObj;\n \n     Database.updateRecord(\"rodent\", \"UserRoles\", dbReq, () => {\n         Script.setState(\"currentCompany\", formObj.CompanyId);\n         // Update the other records with this user to account for the IsAdmin field\n         Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n             eventData.value.forEach((record, pk) => {\n                 if (record.Id != userId) {\n                     let newReq = {};\n                     record.IsAdmin = +formObj.IsAdmin;\n                     newReq[userId] = record;\n                     Database.updateRecord(\"rodent\", \"UserRoles\", newReq);\n                 }\n             });\n             Client.jumpToScreen(\"User Roles\");\n         }, {\n             filter:\n                 `User='${userData.getColumn(\"user\")[0]}'`\n         }\n         );\n     });\n }\n \n function handleCreate() {\n     Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n         let userRoleCollection = SensaCollection.load(eventData.value);\n         var formObj = Script.getFormByKey(\"editUser\");\n         if (formObj == undefined) {\n             alert(\"Please fill out all required fields\");\n             return;\n         }\n         var dbReq = {};\n \n         let today = new Date().getTime() / 1000;\n\n         today = Math.floor(today);\n         //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n         //console.log(JSON.stringify(userRoleCollection));\n         var idColumn = userRoleCollection.getColumn(\"Id\");\n         var id = 1;\n         if (!(idColumn == null || idColumn == undefined)) {\n             id = +userRoleCollection.getColumn(\"Id\").at(-1) + 1;\n         }\n         formObj.Id = `${id}`;\n         formObj.CreatedOn = today;\n         formObj.UpdatedOn = today;\n         formObj.Owner = Client.getUser();\n         formObj.CreatedBy = Client.getUser();\n         formObj.UpdatedBy = Client.getUser();\n         formObj.IsAdmin = +formObj.IsAdmin;\n         console.log(\"data before \" + formObj.IsPrimary);\n         formObj.IsPrimary = +formObj.IsPrimary;\n \n         console.log(\"data after \" + formObj.IsPrimary);\n \n         dbReq[id] = formObj;\n         Database.createRecords(\"rodent\", \"UserRoles\", dbReq, () => {\n             Script.setState(\"currentCompany\", formObj.CompanyId);\n             Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n                 eventData.value.forEach((record, pk) => {\n                     if (record.Id != userId) {\n                         let newReq = {};\n                         record.IsAdmin = +formObj.IsAdmin;\n                         newReq[userId] = record;\n                         Database.updateRecord(\"rodent\", \"UserRoles\", newReq);\n                     }\n                 });\n                 Client.jumpToScreen(\"User Roles\");\n             }, {\n                 filter:\n                     `User='${formObj.User}'`\n             }\n             );\n         });\n     });\n }"},"ev":{}},"userRoleContainer":{"t":"Container","lX":40,"lY":40,"sX":6.5,"sY":3.2,"s":"Edit User Role","ps":{"enabled":"true","scalingType":"OK","width":"650px","height":"320px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Title"},"ev":{}},"userRoleSubmit":{"t":"Button","lX":525,"lY":240,"sX":1,"sY":1.09,"s":"Edit User Role","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"525px","y":"260px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","button name":"Save"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"finishEditUser/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"editUserCompSelect":{"t":"Dropdown","lX":80,"lY":170,"sX":5.5,"sY":1,"s":"Edit User Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"170px"},"ver":"190104c210519","dis":false,"tt":"","a":{"label text":"Company","form id":"editUser","form key":"CompanyId","default options":""},"ev":{}},"editUserSelect":{"t":"Dropdown","lX":80,"lY":100,"sX":5.5,"sY":1,"s":"Edit User Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"100px"},"ver":"190104c210519","dis":false,"tt":"","a":{"label text":"User","form id":"editUser","form key":"User","default options":""},"ev":{}},"Icon#2":{"t":"Icon","lX":1133,"lY":50,"sX":1,"sY":1,"s":"User Roles","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.89%","x":"100% - 130px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"plus-square","outline color":"no outline"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"newUser/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Scripting#0":{"t":"Scripting","lX":35,"lY":820,"sX":1,"sY":1,"s":"Error Codes","ps":{"enabled":"false","scalingType":"OK","width":"9.07%","height":"8.26%","x":"1.36%","y":"62.76%"},"ver":"200124c210519","z":"140","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nconst errorCodesTable = Script.getWidget(\"errorCodesTable\");\nconst troubleTable = Script.getWidget(\"troubleTable\");\nconst deviceModelDropdown = Script.getWidget(\"deviceModelDropdown\");\nconst errorColumns = [\"Id\", \"Code Id\", \"Description\", \"Troubleshooting Help\", \"Code Type\", \"CreatedBy\", \"UpdatedBy\", \"CreatedOn\", \"UpdatedOn\", \"Out of bounds\", \"Status\", \"Model Id\"];\nconst fileColumns = [\"Id\", \"File Location\", \"CreatedBy\", \"UpdatedBy\", \"CreatedAt\", \"Status\"];\n\nvar errorCollection;\nvar troubleFilesCollection;\n\nvar status = \"Show Active\";\nvar deviceModel;\nvar deviceModelMap = {};\n\nconst deleteCodes = {\n    \"errorCodesTable\": \"compDelErrorRows\",\n    \"troubleTable\": \"compDelFileRows\"\n};\n\nClientEvents.subscribe(\"errorCodeSelected\", editErrorCode);\nClientEvents.subscribe(\"addErrorCode\", createNewErrorCode);\nClientEvents.subscribe(\"troubleFileSelected\", editTroubleFile);\nClientEvents.subscribe(\"addTroubleFile\", createNewTroubleFile);\nClientEvents.subscribe(\"deleteErrorCodes\", removeErrorCode);\nClientEvents.subscribe(\"deleteTroubleFiles\", removeTroubleFiles);\nClientEvents.subscribe(\"deviceModelSelected\", setDeviceModel);\n\t\t\t\t\t   \nClientEvents.subscribe(\"changeActiveError\", (eventData) => {\n    status = eventData.value; \n    Database.readRecords(\"rodent\", \"ErrorCodes\", function(eventData) {\n        errorCollection = SensaCollection.load(eventData.value);\n        errorCollection.setColumns(errorColumns);\n        updateTable(errorCodesTable, errorCollection);\n    });\n    if (status !== \"Show Active\") {\n        // Do not attempt to delete inactive elements\n        Script.hideWidget(\"deleteErrorCodeIcon\");\n    } else {\n        // Re-enable widgets if hidden before\n        Script.showWidget(\"deleteErrorCodeIcon\");\n    }\n});\n\nClientEvents.subscribe(\"changeActiveFiles\", (eventData) => {\n    status = eventData.value; \n    Database.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n        troubleFilesCollection = SensaCollection.load(eventData.value);\n        troubleFilesCollection.setColumns(fileColumns);\n        updateTable(troubleTable, troubleFilesCollection);\n    });\n    if (status !== \"Show Active\") {\n        // Do not attempt to delete inactive elements\n        Script.hideWidget(\"deleteTroubleFilesIcon\");\n    } else {\n        // Re-enable widgets if hidden before\n        Script.showWidget(\"deleteTroubleFilesIcon\");\n    }\n});\n\nScript.on('load', function() {\n\tDatabase.readRecords(\"rodent\", \"Model\", function (eventData) {\n\t\ttry{\n\t\t\tconsole.log(JSON.stringify(eventData,null,4));\n\t\t\tlet modelIds = eventData.value.getColumn(\"Id\");\n\t\t\tconsole.log(modelIds);\n\t\t\tlet modelNames = eventData.value.getColumn(\"Name\");\n\t\t\tconsole.log(modelNames);\n\t\t\tmodelNames.forEach((key, i) => deviceModelMap[key] = modelIds[i]);\n\n\t\t\tdeviceModelDropdown.receiveList(modelNames);\n\t\t\tdeviceModel = modelIds[0];\n\t\t\tScript.setState(\"errorDeviceModel\", deviceModel);\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error reading models\");\n\t\t\tconsole.log(error);\n\t\t}\n\t});\n\tDatabase.readRecords(\"rodent\", \"ErrorCodes\", function(eventData) {\n\t\ttry{\n\t\t\terrorCollection = SensaCollection.load(eventData.value);\n\t\t\terrorCollection.setColumns(errorColumns);\n\t\t\tupdateTable(errorCodesTable, errorCollection);\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Error reading error codes\");\n\t\t}\n\t});\n\n\tDatabase.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n\t\ttry {\n\t\t\ttroubleFilesCollection = SensaCollection.load(eventData.value);\n\t\t\ttroubleFilesCollection.setColumns(fileColumns);\n\t\t\tupdateTable(troubleTable, troubleFilesCollection);\n\t\t} catch (error) {\n\t\t\t console.log(\"Error reading troubleshooting files\");\n\t\t}\n\t});\n\n});\n\nfunction setDeviceModel(eventData) {\n\t\n\tdeviceModel = deviceModelMap[eventData.value];\n\t\n\tupdateTable(errorCodesTable, errorCollection);\n\tScript.setState(\"errorDeviceModel\", deviceModel); \n}\n\nfunction updateTable(table, collection) {\n\t\n\tconsole.log(\" receive are \" + JSON.stringify(collection, null, 4));\n    let filteredCollection = collection.query((record, pk) => {\n\t\tif (record[\"Model Id\"] == undefined) {\n\t\t\t// Troubleshooting file\n\t\t\tif (record['Status'] == (status == \"Show Active\")){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\t// Error Code\n\t\t\tif (record['Status'] == (status == \"Show Active\") && record[\"Model Id\"] == deviceModel){\n\t\t\t\treturn true;\n\t\t\t} \n\t\t\t\n\t\t}\n\t\t\n    });\n    \n    ClientEvents.publish(deleteCodes[table._name], \"\");\n    table.receiveValue(filteredCollection);\n}\n\nfunction editErrorCode(eventData) {\n    Script.setState(\"errorData\", eventData.value);\n    Script.setState(\"modifyType\", \"edit\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction editTroubleFile(eventData) {\n    Script.setState(\"fileData\", eventData.value);\n    Script.setState(\"modifyType\", \"edit_file\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction createNewErrorCode() {\n    Script.setState(\"modifyType\", \"add\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction createNewTroubleFile() {\n    Script.setState(\"modifyType\", \"add_file\");\n    Client.jumpToScreen(\"Edit Error Codes\");\n}\n\nfunction removeErrorCode() {\n    var formData = Script.getFormByKey(\"errors\");\n    var ids = formData.codes.getColumn(\"id\");\n    /*for (var i = 0; i < ids.length; i++) {\n        errorCodesTable.deleteRows(ids[i]);\n        let req = {};\n        req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n        Database.updateRecord(\"rodent\", \"ErrorCodes\", req);\n    } */\n\t\n\tif(ids.length === 0) return;\n\t\n\tvar option = {\"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\"};\n\tClient.confirm(\"Do you want to delete error code?\", \"Delete Error Codes\", option).then((eventData) => {\n\t\t\n\t\tconsole.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\t\t\n\t\tif(!eventData) return;\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\terrorCodesTable.deleteRows(ids[i]);\n\t\t\t//let req = {};\n\t\t\t//req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n\t\t\t//Database.updateRecord(\"rodent\", \"Products\", req);\n\t\t\tDatabase.deleteRecord(\"rodent\", \"ErrorCodes\", \"Id\", ids[i]);\n\t\t}\n\t});\n}\n\nfunction removeTroubleFiles() {\n    debugger;\n    var formData = Script.getFormByKey(\"errors\");\n    var ids = formData.files.getColumn(\"id\");\n   /* for (var i = 0; i < ids.length; i++) {\n        troubleTable.deleteRows(ids[i]);\n        let req = {};\n        req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n        Database.updateRecord(\"rodent\", \"TroubleshootingFiles\", req);\n    } */\n\t\n\t\n\tif(ids.length === 0) return;\n\t\n\tvar option = {\"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\"};\n\tClient.confirm(\"Do you want to delete trouble shooting file?\", \"Delete Trouble Shouting File\", option).then((eventData) => {\n\t\t\n\t\tconsole.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\t\t\n\t\tif(!eventData) return;\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\ttroubleTable.deleteRows(ids[i]);\n\t\t\t//let req = {};\n\t\t\t//req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n\t\t\t//Database.updateRecord(\"rodent\", \"Products\", req);\n\t\t\tDatabase.deleteRecord(\"rodent\", \"TroubleshootingFiles\", \"Id\", ids[i]);\n\t\t}\n\t});\n\t\n}"},"ev":{}},"errorCodesTable":{"t":"Table","lX":80,"lY":130,"sX":7.51,"sY":6.74,"s":"Error Codes","ps":{"enabled":"true","scalingType":"OK","width":"50% - 120px","height":"100% - 200px","x":"80px","y":"130px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"code id,description,troubleshooting help,code type,out of bounds","display header":"true","selectable":"multi + single","title":"Error Codes","form id":"errors","form key":"codes","colWidths":"0.09626168224299066,0.19532710280373833,0.27476635514018694,0.1485981308411215,0.2383177570093458"},"ev":{"clientEvents":{"inputEvents":{"Delete All Rows":{"channel":"compDelErrorRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Selected Error code":{"channel":"errorCodeSelected/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"troubleTable":{"t":"Table","lX":912,"lY":130,"sX":7.51,"sY":6.74,"s":"Error Codes","ps":{"enabled":"true","scalingType":"OK","width":"50% - 120px","height":"100% - 200px","x":"50% + 40px","y":"130px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"file location","display header":"true","colWidths":"0.9333333333333333","selectable":"multi + single","title":"Troubleshooting Files","form id":"errors","form key":"files","auto scroll":"false"},"ev":{"clientEvents":{"inputEvents":{"Delete All Rows":{"channel":"compDelFileRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Edit Row":{"channel":"troubleFileSelected/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"deleteErrorCodeIcon":{"t":"Icon","lX":335,"lY":80,"sX":1,"sY":1,"s":"Error Codes","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.67%","x":"50% - 450px","y":"80px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"trash","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deleteErrorCodes/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addErrorCodeIcon":{"t":"Icon","lX":385,"lY":80,"sX":1,"sY":1,"s":"Error Codes","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.67%","x":"50% - 400px","y":"80px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"plus-square","outline color":"no outline"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"addErrorCode/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"deleteTroubleFilesIcon":{"t":"Icon","lX":2203,"lY":80,"sX":1,"sY":1,"s":"Error Codes","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"3.95%","x":"100% - 170px","y":"80px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"trash","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deleteTroubleFiles/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addTroubleFilesIcon":{"t":"Icon","lX":2233,"lY":80,"sX":1,"sY":1,"s":"Error Codes","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"3.95%","x":"100% - 120px","y":"80px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"plus-square","outline color":"no outline"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"addTroubleFile/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Scripting#1":{"t":"Scripting","lX":30,"lY":755,"sX":1,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"false","scalingType":"OK","width":"5.74%","height":"11.34%","x":"37.87%","y":"35.71%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var errorId;\n var fileId;\n var modifyType;\n var deviceModelMap = {};\n const errorContainer = Script.getWidget(\"errorContainer\");\n const errorSubmitButton = Script.getWidget(\"errorSubmitButton\");\n const troubleshootinghelp = Script.getWidget(\"troubleshootinghelp\");\n const errorModelDropdown = Script.getWidget(\"errorModelDropdown\");\n const cancelErrorCode = Script.getWidget(\"cancelErrorCode\");\n Script.on('load', function() {\n     // hide at start\n     hideErrorForm();\n     hideFileForm();\n \n     cancelErrorCode.subscribe(\"pressed\", ()=> {\n         Client.jumpToScreen(\"Error Codes\");\n     });\n     \n     modifyType = Script.getState(\"modifyType\");\n     if (modifyType == \"add_file\") {\n         errorContainer.setTitle(\"New Troubleshooting File\");\n         showFileForm();\n         return;\n     } else if (modifyType == \"edit_file\") {\n         var fileData = Script.getState(\"fileData\");\n         errorContainer.setTitle(\"Edit Troubleshooting File\");\n \n         var fileObj = {};\n         fileId = fileData.getColumn(\"id\")[0];\n         fileObj.FileLocation = fileData.getColumn(\"file location\");\n         fileObj.Status = fileData.getColumn(\"status\");\n         Script.setForm(\"filelocation\", fileObj);\n         showFileForm();\n         return;\n     }\n \n     showErrorForm();\n     Database.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n         try{\n             let fileCollection = SensaCollection.load(eventData.value);\n             fileCollection = fileCollection.filter([\"Id\", \"FileLocation\"]);\n             fileCollection.setColumns([\"value\", \"text\"])\n             troubleshootinghelp.receiveTextValues(fileCollection);\n         } catch (error) {\n             console.log(\"No troubleshooting files set\");\n         }\n         \n         Database.readRecords(\"rodent\", \"Model\", function (eventData) {\n             var errorData;\n  \n             let modelIds = eventData.value.getColumn(\"Id\");\n             let modelNames = eventData.value.getColumn(\"Name\");\n             let errorModels = eventData.value;\n             modelIds.forEach((key, i) => deviceModelMap[key] = modelNames[i]);\n             \n             errorModels.filter([\"Id\", \"Name\"]);\n             errorModels.renameColumn(\"Name\", \"text\");\n             errorModels.renameColumn(\"Id\", \"value\");\n             errorModelDropdown.receiveTextValues(errorModels);\n             \n             if (modifyType == \"add\") {\n                 errorContainer.setTitle(\"New Error Code\");\n                 return;\n             } else if (modifyType == \"edit\") {\n                 errorData = Script.getState(\"errorData\");\n             }\n             \n             var errorObj = {}\n             errorId = errorData.getColumn(\"id\")[0];\n             errorObj.CodeId = errorData.getColumn(\"code id\");\n             errorObj.Description = errorData.getColumn(\"description\");\n             errorObj.Status = errorData.getColumn(\"status\");\n             let filteredFile = fileCollection.query((record, pk) => {\n                 if (record.value == errorData.getColumn(\"troubleshooting help\")[0]) {\n                     return true;\n                 }\n             });\n             errorObj.TroubleshootingHelp = filteredFile.data[0];\n             errorObj.CodeType = errorData.getColumn(\"code type\");\n             errorObj.OOB = errorData.getColumn(\"out of bounds\");\n             //errorObj.ModelId = errorData.getColumn(\"model id\")[0];\n             Script.setForm(\"errorcode\", errorObj);\n             errorModelDropdown.receiveValue(deviceModelMap[errorData.getColumn(\"model id\")[0]]);\n             errorContainer.setTitle(\"Edit Error Code\");\n         });\n     });\n });\n   \n ClientEvents.subscribe(\"finishSubmitError\", function() {\n     debugger;\n     switch (modifyType) {\n         case 'edit':\n             handleEdit();\n             break;\n         case 'add':\n             handleCreate();\n             break;\n         case 'edit_file':\n             handleEditFile();\n             break;\n         case 'add_file':\n             handleCreateFile();\n             break;\n     }\n });\n   \n function handleEdit() {\n     var formObj = Script.getFormByKey(\"errorcode\");\n     if (formObj == undefined) {\n         alert(\"Please fill out all required fields\");\n         return;\n     }\n         \n     var dbReq = {};\n     formObj.Id = errorId;\n     formObj.Status = +formObj.Status;\n     let today = new Date().getTime() / 1000;\n     //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n     formObj.UpdatedOn = Math.floor(today);\n     formObj.UpdatedBy = Client.getUser();\n     dbReq[errorId] = formObj;\n         \n     Database.updateRecord(\"rodent\", \"ErrorCodes\", dbReq, () => {\n         //Script.setState(\"currentCompany\", formObj.CompanyId);\n         Client.jumpToScreen(\"Error Codes\");\n     });\n }\n \n function handleEditFile() {\n     var formObj = Script.getFormByKey(\"filelocation\");\n     if (formObj == undefined) {\n         alert(\"Please fill out all required fields\");\n         return;\n     }\n     var dbReq = {};\n     formObj.Id = fileId;\n     formObj.Status = +formObj.Status;\n     formObj.UpdatedBy = Client.getUser();\n     dbReq[fileId] = formObj;\n         \n     Database.updateRecord(\"rodent\", \"TroubleshootingFiles\", dbReq, () => {\n         //Script.setState(\"currentCompany\", formObj.CompanyId);\n         Client.jumpToScreen(\"Error Codes\");\n     });\n }\n  \n   \n function handleCreate() {\n     Database.readRecords(\"rodent\", \"ErrorCodes\", function(eventData) {\n         var errorCollection = SensaCollection.load(eventData.value);\n         var formObj = Script.getFormByKey(\"errorcode\");\n         \n         if (formObj == undefined) {\n             alert(\"Please fill out all required fields\");\n             return;\n         }\n \n         var dbReq = {};\n         var errorCount = Object.keys(errorCollection.data).length;\n         formObj.Id = `${errorCount + 1}`;\n         formObj.Status = +formObj.Status;\n \n         let today = new Date().getTime() / 1000;\n         today = Math.floor(today);\n         //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n         formObj.CreatedOn = today;\n         formObj.UpdatedOn = today;\n         formObj.CreatedBy = Client.getUser();\n         formObj.UpdatedBy = Client.getUser();\n         dbReq[errorCount + 1] = formObj;\n \n         Database.createRecords(\"rodent\", \"ErrorCodes\", dbReq, () => {\n             \n             Client.jumpToScreen(\"Error Codes\");\n         });\n     });\n }\n \n function handleCreateFile() {\n     Database.readRecords(\"rodent\", \"TroubleshootingFiles\", function(eventData) {\n         var fileCollection = SensaCollection.load(eventData.value);\n         var formObj = Script.getFormByKey(\"filelocation\");\n         \n         if (formObj == undefined) {\n             alert(\"Please fill out all required fields\");\n             return;\n         }\n \n         var dbReq = {};\n         var fileCount = Object.keys(fileCollection.data).length;\n         formObj.Id = `${fileCount + 1}`;\n         formObj.Status = +formObj.Status;\n \n         let today = new Date().getTime() / 1000;\n         //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n         formObj.CreatedAt = Math.floor(today);\n         formObj.CreatedBy = Client.getUser();\n         formObj.UpdatedBy = Client.getUser();\n         dbReq[fileCount + 1] = formObj;\n \n         Database.createRecords(\"rodent\", \"TroubleshootingFiles\", dbReq, () => {\n             \n             Client.jumpToScreen(\"Error Codes\");\n         });\n     });\n }\n \n function hideErrorForm() {\n     Script.hideWidget(\"codeId\");\n     Script.hideWidget(\"desc\");\n     Script.hideWidget(\"troubleshootinghelp\");\n     Script.hideWidget(\"codetype\");\n     Script.hideWidget(\"oob\");\n     Script.hideWidget(\"errorModelDropdown\");\n }\n \n function showErrorForm() {\n     Script.showWidget(\"codeId\");\n     Script.showWidget(\"desc\");\n     Script.showWidget(\"troubleshootinghelp\");\n     Script.showWidget(\"codetype\");\n     Script.showWidget(\"oob\");\n     Script.showWidget(\"errorModelDropdown\");\n }\n \n function hideFileForm() {\n     Script.hideWidget(\"fileloc\");\n     Script.hideWidget(\"filestatus\");\n }\n \n function showFileForm() {\n     Script.showWidget(\"fileloc\");\n     Script.showWidget(\"filestatus\");\n }"},"ev":{}},"Input#3":{"t":"Input","lX":75,"lY":620,"sX":1,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"100px","height":"4.19%","x":"75px","y":"620px"},"ver":"270520c210519","dis":false,"tt":"","a":{"color":"grey","label text":"Enabled","type":"checkbox","checkbox label side":"right","default value":"1","form id":"errorcode","form key":"Status"},"ev":{}},"errorContainer":{"t":"Container","lX":40,"lY":40,"sX":6.5,"sY":7,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"OK","width":"650px","height":"700px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Title"},"ev":{}},"errorSubmitButton":{"t":"Button","lX":796,"lY":954,"sX":1,"sY":1.09,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"525px","y":"620px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","button name":"Save"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"finishSubmitError/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"troubleshootinghelp":{"t":"Dropdown","lX":80,"lY":380,"sX":5.4,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"540px","height":"4.19%","x":"80px","y":"380px"},"ver":"190104c210519","z":"110","dis":false,"tt":"","a":{"default options":"","form id":"errorcode","form key":"TroubleshootingHelp","label text":"Troubleshooting Help","disable edit":"false"},"ev":{}},"codeId":{"t":"Input","lX":80,"lY":170,"sX":5.5,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"170px"},"ver":"270520c210519","dis":false,"tt":"","a":{"color":"grey","form id":"errorcode","label text":"Code ID","form key":"CodeId","type":"number","required":"true"},"ev":{}},"desc":{"t":"Input","lX":80,"lY":507,"sX":5.5,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"310px"},"ver":"270520c210519","z":"110","dis":false,"tt":"","a":{"color":"grey","form id":"errorcode","label text":"Description","form key":"Description","required":"true"},"ev":{}},"codetype":{"t":"Input","lX":80,"lY":450,"sX":5.5,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"450px"},"ver":"270520c210519","dis":false,"tt":"","a":{"color":"grey","form id":"errorcode","label text":"Code Type","form key":"CodeType","type":"number","required":"true"},"ev":{}},"oob":{"t":"Input","lX":80,"lY":520,"sX":5.5,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"520px"},"ver":"270520c210519","dis":false,"tt":"","a":{"color":"grey","form id":"errorcode","label text":"Out of Bounds","form key":"OOB","type":"number","required":"true"},"ev":{}},"fileloc":{"t":"Input","lX":80,"lY":100,"sX":5.5,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"color":"grey","form id":"filelocation","label text":"File Location","form key":"FileLocation","required":"true"},"ev":{}},"filestatus":{"t":"Input","lX":200,"lY":620,"sX":1.2,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"120px","height":"4.19%","x":"200px","y":"620px"},"ver":"270520c210519","dis":false,"tt":"","a":{"color":"grey","label text":"Enabled","type":"checkbox","checkbox label side":"right","default value":"1","form key":"Status","form id":"filelocation"},"ev":{}},"Scripting#2":{"t":"Scripting","lX":55,"lY":855,"sX":1,"sY":1,"s":"Manage Companies","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nconst companiesTable = Script.getWidget(\"companiesTable\");\n \nvar companiesCollection;\n \nvar status = \"Show Active\";\n \nClientEvents.subscribe(\"editCompany\", editCompany);\nClientEvents.subscribe(\"addCompany\", addCompany);\nClientEvents.subscribe(\"deleteCompany\", deleteCompany);\nClientEvents.subscribe(\"changeActiveCompany\", (eventData) => {\n    status = eventData.value; \n    Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n        companiesCollection = SensaCollection.load(eventData.value);\n        updateTable(companiesTable, companiesCollection);\n    });\n\t\n    if (status !== \"Show Active\") {\n        // Do not attempt to delete inactive elements\n        Script.hideWidget(\"deleteCompanyIcon\");\n    } else {\n        // Re-enable widgets if hidden before\n        Script.showWidget(\"deleteCompanyIcon\");\n    } \n});\n \nScript.on('load', function() {\n\n    Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n        companiesCollection = SensaCollection.load(eventData.value);\n        updateTable(companiesTable, companiesCollection);\n    });\n});\n \nfunction updateTable(table, collection) {\n    let filteredCollection = collection.query((record, pk) => {\n        if (record['Status'] == (status == \"Show Active\")) {\n            return true;\n        }\n    });\n    \n    ClientEvents.publish(\"clearAllCompanies\", \"\");\n    table.receiveValue(filteredCollection);\n}\n \nfunction editCompany(eventData) {\n    Script.setState(\"companyData\", eventData.value);\n    Script.setState(\"modifyType\", \"edit\");\n    Client.jumpToScreen(\"Edit Company\");\n}\n\nfunction addCompany() {\n    Script.setState(\"modifyType\", \"add\");\n    Client.jumpToScreen(\"Edit Company\");\n}\n\nfunction deleteCompany() {\n    var formData = Script.getFormByKey(\"company\");\n    var ids = formData.company.getColumn(\"id\");\n    /*for (var i = 0; i < ids.length; i++) {\n        companiesTable.deleteRows(ids[i]);\n        let req = {};\n        req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n        Database.updateRecord(\"rodent\", \"Companies\", req);\n    } */\n\t\n\t\n\tif(ids.length === 0) return;\n\t\n\tvar option = {\"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\"};\n\tClient.confirm(\"Do you want to delete company?\", \"Delete Companies\", option).then((eventData) => {\n\t\t\n\t\tconsole.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\t\t\n\t\tif(!eventData) return;\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\tcompaniesTable.deleteRows(ids[i]);\n\t\t\t//let req = {};\n\t\t\t//req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n\t\t\t//Database.updateRecord(\"rodent\", \"Products\", req);\n\t\t\tDatabase.deleteRecord(\"rodent\", \"Companies\", \"Id\", ids[i]);\n\t\t}\n\t});\n\t\n\t\n}"},"ev":{}},"companiesTable":{"t":"Table","lX":80,"lY":100,"sX":15.83,"sY":6.94,"s":"Manage Companies","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% - 180px","x":"80px","y":"100px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"name,address","form id":"company","form key":"company","title":"Companies","colWidths":"0.6441441441441441,0.3333333333333333","display header":"true","selectable":"multi + single"},"ev":{"clientEvents":{"inputEvents":{"Delete Rows":{"channel":"clearAllCompanies/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Edit Company":{"channel":"editCompany/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"deleteCompanyIcon":{"t":"Icon","lX":95,"lY":1128,"sX":1,"sY":1,"s":"Manage Companies","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.24%","x":"100% - 190px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"trash","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deleteCompany/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addCompanyIcon":{"t":"Icon","lX":179,"lY":1128,"sX":1,"sY":1,"s":"Manage Companies","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.24%","x":"100% - 130px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"plus-square"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"addCompany/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"companyContainer":{"t":"Container","lX":40,"lY":40,"sX":6.3,"sY":3.5,"s":"Edit Company","ps":{"enabled":"true","scalingType":"OK","width":"630px","height":"350px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Title"},"ev":{}},"Input#0":{"t":"Input","lX":140,"lY":162,"sX":5.5,"sY":1,"s":"Edit Company","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"label text":"Name","color":"grey","form id":"companyform","form key":"Name","required":"true"},"ev":{}},"Input#1":{"t":"Input","lX":145,"lY":322,"sX":5.5,"sY":1,"s":"Edit Company","ps":{"enabled":"true","scalingType":"NOVERT","width":"550px","height":"4.19%","x":"80px","y":"170px"},"ver":"270520c210519","dis":false,"tt":"","a":{"label text":"Address","color":"grey","form id":"companyform","form key":"Address","required":"true"},"ev":{}},"Input#7":{"t":"Input","lX":75,"lY":270,"sX":1,"sY":1,"s":"Edit Company","ps":{"enabled":"true","scalingType":"NOVERT","width":"100px","height":"4.19%","x":"75px","y":"270px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","checkbox label side":"right","label text":"Enabled","form id":"companyform","form key":"Status","default value":"1"},"ev":{}},"companySubmitButton":{"t":"Button","lX":525,"lY":270,"sX":1,"sY":1.09,"s":"Edit Company","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"525px","y":"270px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","button name":"Submit"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"finishSubmitCompany/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"editUserIsAdmin":{"t":"Input","lX":75,"lY":240,"sX":1.2,"sY":1,"s":"Edit User Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"120px","height":"4.19%","x":"75px","y":"260px"},"ver":"270520c210519","dis":false,"tt":"","a":{"label text":"Is Admin","type":"checkbox","checkbox label side":"right","form id":"editUser","form key":"IsAdmin"},"ev":{}},"deviceModelDropdown":{"t":"Dropdown","lX":445,"lY":70,"sX":3,"sY":1,"s":"Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"6.06%","x":"50% - 340px","y":"70px"},"ver":"190104c210519","dis":false,"tt":"","a":{"default options":""},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deviceModelSelected/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"errorModelDropdown":{"t":"Dropdown","lX":80,"lY":240,"sX":5.4,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"540px","height":"6.06%","x":"80px","y":"240px"},"ver":"190104c210519","z":"110","dis":false,"tt":"","a":{"default options":"","form id":"errorcode","form key":"ModelId","label text":"Device Model","disable edit":"false"},"ev":{}},"modelTypesTable":{"t":"Table","lX":80,"lY":100,"sX":15.83,"sY":6.84,"s":"Manage Model Types","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% -  190px","x":"80px","y":"100px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"name,question1,question2,question3","form id":"modelType","title":"Model Types","form key":"modelType","selectable":"multi + single","display header":"true","colWidths":""},"ev":{"clientEvents":{"inputEvents":{"Delete Modal Type":{"channel":"clearAllModalTypes/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Edit Modal Type":{"channel":"editModalType/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"deleteModalTypeIcon":{"t":"Icon","lX":2283,"lY":50,"sX":1,"sY":1,"s":"Manage Model Types","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"3.95%","x":"100% - 190px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"trash","outline color":"no outline","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deleteModalType/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addModalTypeIcon":{"t":"Icon","lX":2193,"lY":50,"sX":1,"sY":1,"s":"Manage Model Types","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"3.95%","x":"100% - 130px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"plus-square","outline color":"no outline"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"addModalType/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"modelTypeSubmitButton":{"t":"Button","lX":535,"lY":315,"sX":1,"sY":1.09,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"OK","width":"100px","height":"50px","x":"525px","y":"170px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","button name":"Save"},"ev":{"clientEvents":{"outputEvents":{"Submit":{"channel":"finishSubmitModalType/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"modelTypeContainer":{"t":"Container","lX":40,"lY":40,"sX":6.5,"sY":3.4,"s":"Edit Model Type","ps":{"enabled":"true","scalingType":"OK","width":"650px","height":"340px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Edit Model Type"},"ev":{}},"modelsTable":{"t":"Table","lX":80,"lY":100,"sX":15.83,"sY":6.94,"s":"Manage Device Models","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% - 180px","x":"80px","y":"100px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"name,model type,battery upper,battery lower,icon url","form id":"models","form key":"models","selectable":"multi + single","display header":"true","title":"Models","colWidths":"0.189873417721519,0.19084712755598832,0.189873417721519,0.19084712755598832,0.189873417721519"},"ev":{"clientEvents":{"inputEvents":{"Delete all Rows":{"channel":"userDelModels/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Edit Model":{"channel":"editModel/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"modelTypesDropdown":{"t":"Dropdown","lX":900,"lY":305,"sX":3,"sY":1,"s":"Manage Device Models","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"4.19%","x":"100% - 385px","y":"84px"},"ver":"190104c210519","dis":false,"tt":"","a":{"default options":""},"ev":{"clientEvents":{"outputEvents":{"Model Type Select":{"channel":"modelTypeSelected/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"deleteModelIcon":{"t":"Icon","lX":2193,"lY":50,"sX":1,"sY":1,"s":"Manage Device Models","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.16%","x":"100% - 190px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"trash","outline color":"no outline","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"Delete Model":{"channel":"deleteModel/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"modelTypeSelect":{"t":"Dropdown","lX":80,"lY":120,"sX":2.9,"sY":1,"s":"Edit Model","ps":{"enabled":"true","scalingType":"NOVERT","width":"290px","height":"10%","x":"80px","y":"125px"},"ver":"190104c210519","dis":false,"tt":"","a":{"form id":"modelForm","form key":"ModelType","default options":"","label text":"Model Type"},"ev":{}},"modelSubmit":{"t":"Button","lX":240,"lY":380,"sX":1,"sY":1.09,"s":"Edit Model","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"270px","y":"380px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","outline color":"orange strong","button name":"Save"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"finishEditModel/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"modelFormContainer":{"t":"Container","lX":45,"lY":25,"sX":3.8,"sY":4.2,"s":"Edit Model","ps":{"enabled":"false","scalingType":"OK","width":"380px","height":"420px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Title"},"ev":{}},"addModalIcon":{"t":"Icon","lX":181,"lY":374,"sX":0.07,"sY":0.07,"s":"Manage Device Models","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"3.31","height":"7.3%","x":"14.3%","y":"51.5%"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"plus-square","outline color":"no outline"},"ev":{"clientEvents":{"outputEvents":{"Add Model":{"channel":"addModel/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"activeModelTypeDropDown":{"t":"Dropdown","lX":1584,"lY":124,"sX":3,"sY":1,"s":"Manage Model Types","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"4.19%","x":"100% - 385px","y":"84px"},"ver":"190104c210519","dis":false,"tt":"","a":{"default options":"Show Active, Show Inactive","default value":"Show Active"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"changeActiveModalType/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"modelTypeScript":{"t":"Scripting","lX":25,"lY":905,"sX":1,"sY":1,"s":"Manage Model Types","ps":{"enabled":"false","scalingType":"OK","width":"15.77%","height":"17.79%","x":"19.56%","y":"76.51%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nconst modelTypesTable = Script.getWidget(\"modelTypesTable\");\n \nvar modelTypesCollection;\n \nvar status = \"Show Active\";\n\nClientEvents.subscribe(\"editModalType\", editModalType);\nClientEvents.subscribe(\"addModalType\", addModalType);\nClientEvents.subscribe(\"deleteModalType\", deleteModalType);\nClientEvents.subscribe(\"changeActiveModalType\", (eventData) => {\n    status = eventData.value; \n    Database.readRecords(\"rodent\", \"ModelType\", function(eventData) {\n        modelTypesCollection = SensaCollection.load(eventData.value);\n        updateTable(modelTypesTable, modelTypesCollection);\n    });\n    if (status !== \"Show Active\") {\n        // Do not attempt to delete inactive elements\n        Script.hideWidget(\"deleteModalTypeIcon\");\n    } else {\n        // Re-enable widgets if hidden before\n        Script.showWidget(\"deleteModalTypeIcon\");\n    }\n});\n\nScript.on('load', function() {\n\tDatabase.readRecords(\"rodent\", \"ModelType\", function(eventData) {\n        modelTypesCollection = SensaCollection.load(eventData.value);\n\t\tupdateTable(modelTypesTable, modelTypesCollection);\n    });\n});\n\nfunction updateTable(table, collection) {\n    let filteredCollection = collection.query((record, pk) => {\n        if (record['Status'] == (status == \"Show Active\")) {\n            return true;\n        }\n    });\n    ClientEvents.publish(\"clearAllModalTypes\", \"\");\n    table.receiveValue(filteredCollection);\n}\n \nfunction editModalType(eventData) {\n    Script.setState(\"modelTypeData\", eventData.value);\n    Script.setState(\"modifyType\", \"edit\");\n    Client.jumpToScreen(\"Edit Model Type\");\n}\n\nfunction addModalType() {\n    Script.setState(\"modifyType\", \"add\");\n    Client.jumpToScreen(\"Edit Model Type\");\n}\n\nfunction deleteModalType() {\n    var formData = Script.getFormByKey(\"modelType\");\n    var ids = formData.modelType.getColumn(\"id\");\n   /** for (var i = 0; i < ids.length; i++) {\n        modelTypesTable.deleteRows(ids[i]);\n        let req = {};\n        req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n        Database.updateRecord(\"rodent\", \"ModelType\", req);\n    }\n\t*/\n\tif(ids.length === 0) return;\n\t\n\tvar option = {\"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\"};\n\tClient.confirm(\"Do you want to delete model types?\", \"Delete Model Types\", option).then((eventData) => {\n\t\t\n\t\t//console.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\t\t\n\t\tif(!eventData) return;\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\tmodelTypesTable.deleteRows(ids[i]);\n\t\t\t//let req = {};\n\t\t\t//req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n\t\t\t//Database.updateRecord(\"rodent\", \"Products\", req);\n\t\t\tDatabase.deleteRecord(\"rodent\", \"ModelType\", \"Id\", ids[i]);\n\t\t}\n\t});\n}"},"ev":{}},"modelTypeNameInput":{"t":"Input","lX":85,"lY":75,"sX":5.5,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"NOVERT","width":"550px","height":"11%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modalTypeForm","form key":"Name","required":"true","label text":"Name","color":"grey"},"ev":{}},"modelTypeEnabledCheckbox":{"t":"Input","lX":110,"lY":320,"sX":1,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"NOVERT","width":"100px","height":"11%","x":"75px","y":"170px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modalTypeForm","form key":"Status","type":"checkbox","default value":"1","label text":"Enabled","checkbox label side":"right"},"ev":{}},"modelTypeSubmitScript":{"t":"Scripting","lX":40,"lY":355,"sX":1,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"OK","width":"12.33%","height":"17.79%","x":"6.29%","y":"70.28%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description:\n * Create Author/Date:\n * Modified Author/Date Date:\n * Version:\n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var modelTypeId;\n var modifyType;\n const modelTypeContainer = Script.getWidget(\"modelTypeContainer\");\n const modelTypeSubmitButton = Script.getWidget(\"modelTypeSubmitButton\");\n const cancelModelType = Script.getWidget(\"cancelModelType\");\n Script.on(\"load\", function () {\n   modifyType = Script.getState(\"modifyType\");\n   var modelTypeData;\n \n   cancelModelType.subscribe(\"pressed\", () => {\n     Client.jumpToScreen(\"Manage Model Types\");\n   });\n   if (modifyType == \"add\") {\n     modelTypeContainer.setTitle(\"New Model Type\");\n     return;\n   } else if (modifyType == \"edit\") {\n     modelTypeData = Script.getState(\"modelTypeData\");\n   }\n   var modelTypeObj = {};\n   modelTypeId = modelTypeData.getColumn(\"id\")[0];\n   modelTypeObj.Name = modelTypeData.getColumn(\"name\");\n   modelTypeObj.Status = modelTypeData.getColumn(\"status\");\n   modelTypeObj.IsSmart = modelTypeData.getColumn(\"issmart\");\n   modelTypeObj.IsDefault = modelTypeData.getColumn(\"isdefault\");\n   modelTypeObj.Question1 = modelTypeData.getColumn(\"question1\");\n   modelTypeObj.Question2 = modelTypeData.getColumn(\"question2\");\n   modelTypeObj.Question3 = modelTypeData.getColumn(\"question3\");\n \n   Script.setForm(\"modalTypeForm\", modelTypeObj);\n   modelTypeContainer.setTitle(\"Edit Model Type\");\n });\n \n ClientEvents.subscribe(\"finishSubmitModalType\", function () {\n   switch (modifyType) {\n     case \"edit\":\n       handleEdit();\n       break;\n     case \"add\":\n       handleCreate();\n       break;\n   }\n });\n \n function handleEdit() {\n   var formObj = Script.getFormByKey(\"modalTypeForm\");\n   if (formObj == undefined) {\n     alert(\"Please fill out all required fields\");\n     return;\n   }\n   var dbReq = {};\n   formObj.Id = modelTypeId;\n   formObj.Status = +formObj.Status;\n   formObj.IsSmart = +formObj.IsSmart;\n   formObj.IsDefault = +formObj.IsDefault;      \n   let today = new Date().getTime() / 1000;\n   today = Math.floor(today);\n   //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n   formObj.UpdatedOn = today;\n   formObj.UpdatedBy = Client.getUser();\n   dbReq[modelTypeId] = formObj;\n   if (formObj.IsDefault == 1) {\n     var updateDefaultQuery = [\n       {\n         Sql: \"UPDATE ModelType SET IsDefault=0\",\n       },\n     ];\n     Database.cudParam(\n       \"Rodent\",\n       \"ModelType\",\n       updateDefaultQuery,\n       function (packet) {\n         Database.updateRecord(\"rodent\", \"ModelType\", dbReq, () => {\n           Client.jumpToScreen(\"Manage Model Types\");\n         });\n       }\n     );\n   } else {\n     Database.updateRecord(\"rodent\", \"ModelType\", dbReq, () => {\n       Client.jumpToScreen(\"Manage Model Types\");\n     });\n   }\n }\n \n function handleCreate() {\n   Database.readRecords(\"rodent\", \"ModelType\", function (eventData) {\n     var modelTypeCollection = SensaCollection.load(eventData.value);\n     var formObj = Script.getFormByKey(\"modalTypeForm\");\n     if (formObj == undefined) {\n       alert(\"Please fill out all required fields\");\n       return;\n     }\n     var dbReq = {};\n     var modelTypeCount = Object.keys(modelTypeCollection.data).length;\n     formObj.Id = `${modelTypeCount + 1}`;\n     formObj.Status = +formObj.Status;\n     formObj.IsSmart = +formObj.IsSmart;\n     formObj.IsDefault = +formObj.IsDefault;\n     let today = new Date() / 1000;\n     today = Math.floor(today);\n     //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n     formObj.CreatedOn = today;\n     formObj.UpdatedOn = today;\n     formObj.CreatedBy = Client.getUser();\n     formObj.UpdatedBy = Client.getUser();\n     dbReq[modelTypeCount + 1] = formObj;\n     if (formObj.IsDefault == 1) {\n       var updateDefaultQuery = [\n         {\n           Sql: \"UPDATE ModelType SET IsDefault=0\",\n         },\n       ];\n       Database.cudParam(\n         \"Rodent\",\n         \"ModelType\",\n         updateDefaultQuery,\n         function (packet) {\n           Database.createRecords(\"rodent\", \"ModelType\", dbReq, () => {\n             Client.jumpToScreen(\"Manage Model Types\");\n           });\n         }\n       );\n     } else {\n       Database.createRecords(\"rodent\", \"ModelType\", dbReq, () => {\n         Client.jumpToScreen(\"Manage Model Types\");\n       });\n     }\n   });\n }"},"ev":{}},"modelScript":{"t":"Scripting","lX":30,"lY":845,"sX":1,"sY":1,"s":"Manage Device Models","ps":{"enabled":"false","scalingType":"OK","width":"4.2%","height":"7.9%","x":"41.96%","y":"4.34%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description:\n * Create Author/Date:\n * Modified Author/Date Date:\n * Version:\n */\n\n/**\n * Initialise script state (run once at startup)\n */\n\nvar modelCollection;\nvar currentModelType;\nvar modelTypesCollection;\n\nconst modelTypesTable = Script.getWidget(\"modelsTable\");\nconst compDropdown = Script.getWidget(\"modelTypesDropdown\");\n\nClientEvents.subscribe(\"modelTypeSelected\", changeModel);\nClientEvents.subscribe(\"deleteModel\", deleteModel);\nClientEvents.subscribe(\"editModel\", editModel);\nClientEvents.subscribe(\"addModel\", addModel);\n\nScript.on(\"load\", function () {\n  Database.readRecords(\"rodent\", \"ModelType\", function (eventData) {\n    modelTypesCollection = SensaCollection.load(eventData.value);\n    Database.readRecords(\"rodent\", \"Model\", function (eventData) {\n      modelCollection = SensaCollection.load(eventData.value);\n      currentModelType = Script.getState(\"currentModelType\");\n      let modelTypeNames = modelTypesCollection.getColumn(\"Name\");\n      let modelTypeIds = modelTypesCollection.getColumn(\"Id\");\n      if (currentModelType == null) {\n        currentModelType = modelTypeIds[0];\n      }\n      let modelTypeObj = {};\n      modelTypeIds.map((model, idx) => {\n        modelTypeObj[model] = modelTypeNames[idx];\n      });\n      Object.keys(modelTypeObj).forEach((model, idx) => {\n        modelTypesCollection.set({ Id: model, Name: modelTypeObj[model] });\n      });\n      modelTypesCollection.renameColumn(\"Name\", \"text\");\n      modelTypesCollection.renameColumn(\"Id\", \"value\");\n      compDropdown.receiveTextValues(modelTypesCollection);\n      compDropdown.receiveValue(modelTypeObj[currentModelType]);\n      modelTypesCollection.renameColumn(\"text\", \"Name\");\n      modelTypesCollection.renameColumn(\"value\", \"Id\");\n      updateTable();\n    });\n  });\n});\n\nfunction updateTable() {\n  let filteredModels = modelCollection.query((record, pk) => {\n    if (record[\"ModelType\"] == currentModelType && record[\"Status\"] == \"1\") {\n      return true;\n    }\n  });\n  let modelTypeName = modelTypesCollection\n    .query((modelType, pk) => {\n      if (modelType[\"Id\"] == currentModelType) {\n        return true;\n      }\n    })\n    .getFirst();\n  filteredModels.forEach((model, pk) => {\n    filteredModels.set({ Id: model[\"Id\"], ModelType: modelTypeName[\"Name\"] });\n  });\n  //name,model type,battery upper,battery lower\n  ClientEvents.publish(\"userDelModels\", \"\");\n  filteredModels.renameColumn(\"ModelType\", \"Model Type\");\n  filteredModels.renameColumn(\"BatteryUpper\", \"Battery Upper\");\n  filteredModels.renameColumn(\"BatteryLower\", \"Battery Lower\");\n  filteredModels.renameColumn(\"IconURL\", \"Icon Url\");\n  modelTypesTable.receiveValue(filteredModels);\n}\n\nfunction changeModel(selected) {\n  currentModelType = selected.value;\n  updateTable();\n}\n\nfunction deleteModel() {\n  let formData = Script.getFormByKey(\"models\");\n  var ids = formData.models.getColumn(\"id\");\n\n  if (ids.length === 0) return;\n\n  var option = { confirmText: \"Confirm\", cancelText: \"Cancel\" };\n  Client.confirm(\n    \"Do you want to delete device model?\",\n    \"Delete Device Model\",\n    option\n  ).then((eventData) => {\n    //console.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\n    if (!eventData) return;\n    for (var i = 0; i < ids.length; i++) {\n      modelTypesTable.deleteRows(ids[i]);\n      Database.deleteRecord(\"rodent\", \"Model\", \"Id\", ids[i]);\n    }\n  });\n}\n\nfunction editModel(eventData) {\n  //filteredModels.renameColumn(\"Battery Upper\", \"BatteryUpper\");\n  //filteredModels.renameColumn(\"Battery Lower\", \"BatteryLower\");\n  var data = SensaCollection.load(eventData.value);\n  data.renameColumn(\"battery upper\", \"batteryupper\");\n  data.renameColumn(\"battery lower\", \"batterylower\");\n  data.renameColumn(\"icon url\", \"iconurl\");\n  console.log(\"modele info \" + JSON.stringify(data, null, 4));\n  Script.setState(\"modelInfo\", data); //eventData.value\n\n  Script.setState(\"currentModelType\", currentModelType);\n  Script.setState(\"modifyType\", \"edit\");\n  //filteredModels.renameColumn(\"Model Type\", \"ModelType\");\n  //filteredModels.renameColumn(\"Battery Upper\", \"BatteryUpper\");\n  //filteredModels.renameColumn(\"Battery Lower\", \"BatteryLower\");\n  Client.jumpToScreen(\"Edit Model\");\n}\n\nfunction addModel() {\n  Script.setState(\"currentModelType\", currentModelType);\n  Script.setState(\"modifyType\", \"add\");\n  Client.jumpToScreen(\"Edit Model\");\n}\n"},"ev":{}},"modelNameInput":{"t":"Input","lX":80,"lY":65,"sX":3,"sY":1,"s":"Edit Model","ps":{"enabled":"false","scalingType":"NOVERT","width":"300px","height":"10%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modelForm","form key":"Name","label text":"Name","required":"true","color":"grey"},"ev":{}},"modelSubmitScript":{"t":"Scripting","lX":55,"lY":470,"sX":1,"sY":1,"s":"Edit Model","ps":{"enabled":"false","scalingType":"OK","width":"8.41%","height":"17.79%","x":"8.41%","y":"77.58%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description:\n * Create Author/Date:\n * Modified Author/Date Date:\n * Version:\n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var userId;\n var modifyType;\n var modelTypeId;\n var modelData;\n \n const modelFormContainer = Script.getWidget(\"modelFormContainer\");\n //const userSubmitButton = Script.getWidget(\"userRoleSubmit\");\n const modelTypeSelect = Script.getWidget(\"modelTypeSelect\");\n const cancelModelBtn = Script.getWidget(\"cancelModelBtn\");\n \n Script.on(\"load\", function () {\n   cancelModelBtn.subscribe(\"pressed\", () => {\n     Client.jumpToScreen(\"Manage Device Models\");\n   });\n   modifyType = Script.getState(\"modifyType\");\n   if (modifyType == \"add\") {\n     modelFormContainer.setTitle(\"New User Role\");\n   } else if (modifyType == \"edit\") {\n     modelData = Script.getState(\"modelInfo\");\n     modelFormContainer.setTitle(\"Edit User Role\");\n     if (modelData != null) {\n       var modelObj = {};\n       modelObj.Name = modelData.getColumn(\"name\");\n       modelObj.BatteryLower = modelData.getColumn(\"batterylower\");\n       modelObj.BatteryUpper = modelData.getColumn(\"batteryupper\");\n       modelObj.IconURL = modelData.getColumn(\"iconurl\");\n       Script.setForm(\"modelForm\", modelObj);\n     }\n   }\n   Database.readRecords(\"rodent\", \"ModelType\", function (eventData) {\n     let modelTypesCollection = SensaCollection.load(eventData.value);\n     let modelTypeNames = modelTypesCollection.getColumn(\"Name\");\n     let modelTypeIds = modelTypesCollection.getColumn(\"Id\");\n     modelTypeId = Script.getState(\"currentModelType\");\n     if (modelTypeId == null) {\n       modelTypeId = compIds[0];\n     }\n     let modelTypeObj = {};\n     modelTypeIds.map((model, idx) => {\n       modelTypeObj[model] = modelTypeNames[idx];\n     });\n     Object.keys(modelTypeObj).forEach((model, idx) => {\n       modelTypesCollection.set({ Id: model, Name: modelTypeObj[model] });\n     });\n     modelTypesCollection.renameColumn(\"Name\", \"text\");\n     modelTypesCollection.renameColumn(\"Id\", \"value\");\n     modelTypeSelect.receiveTextValues(modelTypesCollection);\n     modelTypeSelect.receiveValue(modelTypesCollection.get(modelTypeId).text);\n   });\n });\n \n ClientEvents.subscribe(\"finishEditModel\", function () {\n   switch (modifyType) {\n     case \"edit\":\n       handleEdit();\n       break;\n     case \"add\":\n       handleCreate();\n       break;\n   }\n });\n \n function handleEdit() {\n   var formObj = Script.getFormByKey(\"modelForm\");\n   if (formObj == undefined) {\n     alert(\"Please fill out all required fields\");\n     return;\n   }\n   var dbReq = {};\n   let today = new Date().getTime() / 1000;\n   today = Math.floor(today);\n   //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n   formObj.UpdatedOn = today;\n   formObj.UpdatedBy = Client.getUser();\n   let modelData = Script.getState(\"modelInfo\");\n   let modelId = modelData.getColumn(\"id\")[0];\n   formObj.Id = modelId;\n   dbReq[modelId] = formObj;\n   Database.updateRecord(\"rodent\", \"Model\", dbReq, () => {\n     Script.setState(\"currentModelType\", formObj.ModelType);\n     Client.jumpToScreen(\"Manage Device Models\");\n   });\n }\n \n function handleCreate() {\n   Database.readRecords(\"rodent\", \"Model\", function (eventData) {\n     let modelCollection = SensaCollection.load(eventData.value);\n     var formObj = Script.getFormByKey(\"modelForm\");\n     if (formObj == undefined) {\n       alert(\"Please fill out all required fields\");\n       return;\n     }\n     var dbReq = {};\n     let today = new Date().getTime() / 1000;\n     today = Math.floor(today);\n     //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n       var id;\n       try{\n         id = +modelCollection.getColumn(\"Id\").at(-1) + 1;\n       }catch (error) {\n           id = 1;\n       }\n     formObj.Id = `${id}`;\n     formObj.CreatedOn = today;\n     formObj.UpdatedOn = today;\n     formObj.CreatedBy = Client.getUser();\n     formObj.UpdatedBy = Client.getUser();\n     dbReq[id] = formObj;\n     Database.createRecords(\"rodent\", \"Model\", dbReq, () => {\n       Script.setState(\"currentModelType\", formObj.ModelType);\n       Client.jumpToScreen(\"Manage Device Models\");\n     });\n   });\n }"},"ev":{}},"modelBatteryUpperInput":{"t":"Input","lX":80,"lY":180,"sX":3,"sY":1,"s":"Edit Model","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"10%","x":"80px","y":"190px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modelForm","form key":"BatteryUpper","label text":"Battery Upper","color":"grey"},"ev":{}},"packetContainer":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Packet 6 Transactions","ps":{"enabled":"true","scalingType":"OK","width":"100%-80px","height":"100%-80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"Transaction Table","color":"grey"},"ev":{}},"tableCtl":{"t":"PickSlider","lX":80,"lY":80,"sX":7.84,"sY":1,"s":"Packet 6 Transactions","ps":{"enabled":"true","scalingType":"NOVERT","width":"90%","height":"5.72%","x":"80px","y":"80px"},"ver":"190104c210519","dis":false,"tt":"","a":{"tick values":"Day,Week,Month,3 Months,Year","form id":"slider-info","form key":"slider-value"},"ev":{"clientEvents":{"outputEvents":{"interval Set":{"channel":"intervalSet/receive value","event":"changed","trigger":"changed","important":"false"}}}}},"packet6Script":{"t":"Scripting","lX":45,"lY":810,"sX":1,"sY":1,"s":"Packet 6 Transactions","ps":{"enabled":"false","scalingType":"OK","width":"5.74%","height":"11.44%","x":"43.83%","y":"86.84%"},"ver":"200124c210519","z":"140","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n const transactionTable = Script.getWidget(\"transactionTable\");\n var transactionDataCollection = null;\n \n const tableSlider = Script.getWidget(\"tableCtl\");\n \n var slideValue = \"Day\";\n \n var intervalMap = {\n     \"Day\": 1,\n     \"Week\": 7,\n     \"Month\": 30,\n     \"3 Months\": 90,\n     \"Year\": 365\n };\n \n \n var locationData = [\n     {\n         \"TableName\": \"Locations\", // Specify the primary table used to construct the join request\n         \"Join\": 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n         \"Columns\":\n             [\n                 \"Id\",\n                 \"Name\"\n \n             ], // Specify the list of columns to take from the reference table.\n         // Specify the list of columns to take from the reference table.\n \n \n     }];\n \n \n var siteData = [\n     {\n         \"TableName\": \"Sites\", // Specify the primary table used to construct the join request\n         \"Join\": 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n         \"Columns\":\n             [\n                 \"Id\",\n                 \"Name\"\n \n             ], // Specify the list of columns to take from the reference table.\n         // Specify the list of columns to take from the reference table.\n \n \n     }];\n /*.\n var selectPacket = [\n         {\n             \"TableName\": \"P6Transactions\", // Specify the primary table used to construct the join request\n             \"Join\": 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n             \"Columns\":\n             [\n             \"DateTime\",\n             \"DeviceNumber\", \n             \"P5Total\",\n             \"IRLeft\",\n             \"IRRight\",\n             \"AvgDelta\",\n             \"MinDelta\",\n             \"MaxDelta\",\n             \"L1\",\n             \"L2\",\n             \"Range\",\n             \"RebaitRange\",\n             \"TakenG\",\n             \"IRL Top\",\n             \"IRL Bottom\",\n             \"IRR Top\",\n             \"IRR Bottom\",\n             \"LocationId\",\n             \"SiteId\"\n             ], // Specify the list of columns to take from the reference table.\n             // Specify the list of columns to take from the reference table.\n         \n \n         }];*/\n var locationsData;\n const maxUnixtime = 2147483647;\n var sitesData;\n var selectPacket = [\n     {\n         \"TableName\": \"P6Transactions\", // Specify the primary table used to construct the join request\n         \"Join\": 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n         \"Columns\":\n             [\n                 \"DateTime\",\n                 \"DeviceNumber\",\n                 \"P5Total\",\n                 \"IRLeft\",\n                 \"IRRight\",\n                 \"AvgDelta\",\n                 \"MinDelta\",\n                 \"MaxDelta\",\n                 \"L1\",\n                 \"L2\",\n                 \"Range\",\n                 \"RebaitRange\",\n                 \"TakenG\",\n                 \"IRLTop\",\n                 \"IRLBottom\",\n                 \"IRRTop\",\n                 \"IRRBottom\",\n                 \"Tilt\",\n                 \"PrevLC\",\n                 \"LocationId\",\n                 \"SiteId\"\n             ], // Specify the list of columns to take from the reference table.\n         // Specify the list of columns to take from the reference table.\n \n     }];\n \n \n \n const tableColumns = [\"date time\", \"device number\", \"p5 total\", \"irleft\", \"irright\", \"average\",\n     \"mindelta\", \"maxdelta\", \"l1\", \"l2\", \"range\", \"rebait range\", \"takeng\",\n     \"IRL Top\", \"IRL Bottom\", \"IRR Top\", \"IRR Bottom\", \"location\", \"site\"];\n \n const tableColumns1 = [\"date time\", \"device number\", \"p5 total\", \"irleft\", \"irright\", \"average\",\n     \"mindelta\", \"maxdelta\", \"l1\", \"l2\", \"range\", \"rebait range\", \"takeng\", \"IRL Top\",\n     \"IRL Bottom\", \"IRR Top\", \"IRR Bottom\", \"location\", \"site\"];\n Script.on('load', function () {\n     Database.readRecords(\"rodent\", \"Locations\", (lData)=> {\n         locationsData = SensaCollection.load(lData.value);\n     });\n \n     Database.readRecords(\"rodent\", \"Sites\", (eventData)=> {\n         sitesData = SensaCollection.load(eventData.value);\n     });\n \n \n     let downloadBtn = Script.getWidget(\"downloadData\");\n \n     downloadBtn.subscribe(\"pressed\", (eventData) => {\n \n         Script.downloadCSV(\"packet_6_data.csv\", transactionDataCollection);\n     });\n \n     ClientEvents.subscribe(\"intervalSet\", function (timeData) {\n         slideValue = timeData.value;\n         //sortData(slideValue);\n \n     });\n \n     ClientEvents.subscribe(\"displayTransactions\", function (eventData) {\n         // button has been pressed, grab the device number and only display that data\n         sortDataV2();\n     }) \n \n     //sortData(\"Day\");\n \n });\n \n \n /**\n * Sort and populate the data in the table\n */\n function sortData(timeValue) {\n     Database.readCompound(\"rodent\", \"P6Transactions\", selectPacket, function(eventData){\n         transactionDataCollection = SensaCollection.load(eventData.value);\n         var tableData = {};\n         \n         //console.log(\"Data from the P6 table is on line 157 \" + JSON.stringify(transactionDataCollection, null, 4));\n         \n \n         const date = Date.parse(new Date()); //new Date();\n \n         var slideData = intervalMap[timeValue];\n         \n          for (const packet in transactionDataCollection.data) {\n          \n     \n             var dataValue = transactionDataCollection.data[packet][0]; //grab the data\n              \n             var dateDiff = date - parseInt(dataValue);\n             //var daysMiliseconds = 86400000;\n             var days = (dateDiff / (60 * 60 * 24 * 1000)) % 365;\n             //console.log(\"Th data value is \" + dataValue + \" datedif is \" + dateDiff + \" dys is \" + days + \" if statement \" + days <= slideData || days > 365);\n             if (days <= slideData || days > 365) {\n                 var dateTime =  parseInt(transactionDataCollection.data[packet][0]);\n                 if(dateTime < maxUnixtime) {\n                    dateTime = dateTime * 1000;\n                 }\n                 dateTime = formatTime(dateTime);\n                 transactionDataCollection.data[packet][0] = dateTime; //formating date\n                 transactionDataCollection.data[packet][11] = parseFloat(transactionDataCollection.data[packet][11]).toFixed(2); // rebait range\n                 transactionDataCollection.data[packet][12] = parseFloat(transactionDataCollection.data[packet][12]).toFixed(2); // taken gram\n                 \n                 if(transactionDataCollection.data[packet][17] in locationsData.data) {\n                     transactionDataCollection.data[packet][17] = locationsData.data[transactionDataCollection.data[packet][17]][2];\n                 }\n                 \n                 if(transactionDataCollection.data[packet][18] in sitesData.data) {\n                     transactionDataCollection.data[packet][18] = sitesData.data[transactionDataCollection.data[packet][18]][1];\n                 }\n                 \n             } else {\n                 delete transactionDataCollection.data[packet];\n             }\n             \n          }\n \n         const data = Object.keys(transactionDataCollection.data).reverse().reduce(\n               (obj, key) => { \n                 obj[key] = transactionDataCollection.data[key]; \n                 return obj;\n               }, \n           {}\n         );\n         transactionDataCollection.data = data;\n         \n         transactionDataCollection.renameColumn(\"AvgDelta\", \"Average\"); //AvgDelta\n         transactionDataCollection.renameColumn(\"DateTime\", \"date time\"); //AvgDelta\n         transactionDataCollection.renameColumn(\"DeviceNumber\", \"device number\");\n         transactionDataCollection.renameColumn(\"P5Total\", \"P5 Total\");\n \n         transactionDataCollection.renameColumn(\"RebaitRange\", \"rebait range\");\n         transactionDataCollection.renameColumn(\"IRLTop\", \"irl top\");\n         transactionDataCollection.renameColumn(\"IRLBottom\", \"irl bottom\");\n         transactionDataCollection.renameColumn(\"IRRTop\", \"irr top\");\n         transactionDataCollection.renameColumn(\"IRRBottom\", \"irr bottom\"); // PrevLC\n         transactionDataCollection.renameColumn(\"PrevLC\", \"Prev LoadCell\"); // PrevLC\n         transactionDataCollection.renameColumn(\"LocationId\", \"Location\"); // \n         transactionDataCollection.renameColumn(\"SiteId\", \"Site\");\n         updateTable(transactionTable, transactionDataCollection); //transactionDataCollection  newTransanction\n     });\n \n }\n \n /**\n * Sort and populate the data in the table\n */\n function sortDataV2() {\n     var filteredDeviceNumber = Script.getFormByKey(\"device-info\")[\"device-number\"];\n     // var timeValue = Script.getFormByKey(\"slider-info\")[\"slider-value\"];\n     var timeValue = slideValue;\n     if (filteredDeviceNumber !== \"\" && !(isNaN(parseInt(filteredDeviceNumber))) ) {\n         // add filter to filter by device\n         selectPacket[0][\"Filters\"] = \n              [{\n                  \"Column\": \"DeviceNumber\", //Column that will be applied (don't include table name will be resolved if its contained within the reference table.\n                  \"ParamName\": \"DeviceNumber\", // Parameter name, must be unique and should not contain $ as its resolved by the mapper. \n                  \"Value\": filteredDeviceNumber // Value that you want to pass for comparison (any object)\n              }];\n \n     } else {\n         // otherwise remove it\n         delete selectPacket[0][\"Filters\"];\n     }\n \n     console.log(JSON.stringify(selectPacket,null,4));\n     Database.readCompound(\"rodent\", \"P6Transactions\", selectPacket, function(eventData){\n         transactionDataCollection = SensaCollection.load(eventData.value);\n         var tableData = {};\n         \n         //console.log(\"Data from the P6 table is on line 157 \" + JSON.stringify(transactionDataCollection, null, 4));\n         \n \n         const date = Date.parse(new Date()); //new Date();\n \n         var slideData = intervalMap[timeValue];\n         \n          for (const packet in transactionDataCollection.data) {\n          \n     \n             var dataValue = transactionDataCollection.data[packet][0]; //grab the data\n              \n             var dateDiff = date - parseInt(dataValue);\n             //var daysMiliseconds = 86400000;\n             var days = (dateDiff / (60 * 60 * 24 * 1000)) % 365;\n             //console.log(\"Th data value is \" + dataValue + \" datedif is \" + dateDiff + \" dys is \" + days + \" if statement \" + days <= slideData || days > 365);\n             if (days <= slideData || days > 365) {\n                var dateTime =  parseInt(transactionDataCollection.data[packet][0]);\n                if(dateTime < maxUnixtime) {\n                   dateTime = dateTime * 1000;\n                }\n                dateTime = formatTime(dateTime);\n                transactionDataCollection.data[packet][0] = dateTime;\n                 transactionDataCollection.data[packet][11] = parseFloat(transactionDataCollection.data[packet][11]).toFixed(2); // rebait range\n                 transactionDataCollection.data[packet][12] = parseFloat(transactionDataCollection.data[packet][12]).toFixed(2); // taken gram\n                 \n                 if(transactionDataCollection.data[packet][17] in locationsData.data) {\n                     transactionDataCollection.data[packet][17] = locationsData.data[transactionDataCollection.data[packet][17]][2];\n                 }\n                 \n                 if(transactionDataCollection.data[packet][18] in sitesData.data) {\n                     transactionDataCollection.data[packet][18] = sitesData.data[transactionDataCollection.data[packet][18]][1];\n                 }\n                 \n             } else {\n                 delete transactionDataCollection.data[packet];\n             }\n             \n          }\n \n         const data = Object.keys(transactionDataCollection.data).reverse().reduce(\n               (obj, key) => { \n                 obj[key] = transactionDataCollection.data[key]; \n                 return obj;\n               }, \n           {}\n         );\n         transactionDataCollection.data = data;\n         \n         transactionDataCollection.renameColumn(\"AvgDelta\", \"Average\"); //AvgDelta\n         transactionDataCollection.renameColumn(\"DateTime\", \"date time\"); //AvgDelta\n         transactionDataCollection.renameColumn(\"DeviceNumber\", \"device number\");\n         transactionDataCollection.renameColumn(\"P5Total\", \"P5 Total\");\n \n         transactionDataCollection.renameColumn(\"RebaitRange\", \"rebait range\");\n         transactionDataCollection.renameColumn(\"IRLTop\", \"irl top\");\n         transactionDataCollection.renameColumn(\"IRLBottom\", \"irl bottom\");\n         transactionDataCollection.renameColumn(\"IRRTop\", \"irr top\");\n         transactionDataCollection.renameColumn(\"IRRBottom\", \"irr bottom\"); // PrevLC\n         transactionDataCollection.renameColumn(\"PrevLC\", \"Prev LoadCell\"); // PrevLC\n         transactionDataCollection.renameColumn(\"LocationId\", \"Location\"); // \n         transactionDataCollection.renameColumn(\"SiteId\", \"Site\");\n         updateTable(transactionTable, transactionDataCollection); //transactionDataCollection  newTransanction\n     });\n \n }\n \n /*Delay function*/\n function delay(time) {\n     return new Promise(resolve => setTimeout(resolve, time));\n }\n \n /**\n * Update data in the table\n */\n function updateTable(table, collection) {\n     ClientEvents.publish(\"deleteRows\", \"\");\n     table.receiveValue(collection);\n \n }\n \n //date time,device number,p5 total,irleft,irright,average,mindelta,maxdelta,l1,l2,range,rebait range,takeng,location,site\n /**\n * Format time from milisecond to Date and time format\n */\n\n function formatTime(today) {\n \n    //return Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n    var date;\n    if(typeof today == \"number\") {\n       date = new Date(today).toLocaleString('en-GB');\n    } else {\n       date = new Date(parseInt(today)).toLocaleString('en-GB');\n    }\n    var d = date.split(\", \");\n    var d0 = d[0].split(\"/\");\n    //d0[2] = Math.abs(d0[2] - 2000);\n    d0 = d0.join(\"/\");\n    //return d[1] + \" \" + d0;\n    return d0 + \" \" + d[1].substring(0, 5);\n}"},"ev":{}},"transactionTable":{"t":"Table","lX":80,"lY":200,"sX":15.83,"sY":5.94,"s":"Packet 6 Transactions","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% - 280px","x":"80px","y":"200px"},"ver":"190104c210519","dis":false,"tt":"","a":{"columns":"date time,device number,p5 total,irleft,irright,average,mindelta,maxdelta,l1,l2,range,rebait range,takeng,irl top,irl bottom,irr top,irr bottom,tilt,prev loadcell,location,site","text color":"#000000","row color":"#000000","display header":"true","enable search":"true","title":"Packet 6 Data","colWidths":"0.04743833017077799,0.0480708412397217,0.04743833017077799,0.04743833017077799,0.04743833017077799,0.0480708412397217,0.04743833017077799,0.04680581910183428,0.048703352308665404,0.04743833017077799,0.04743833017077799,0.04743833017077799,0.04743833017077799,0.0480708412397217,0.04680581910183428,0.048703352308665404,0.04680581910183428,0.0480708412397217,0.04743833017077799,0.04743833017077799,0.0480708412397217"},"ev":{"clientEvents":{"inputEvents":{"transTable6":{"channel":"deleteRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"Row selected":{"channel":"rowSelected/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Scripting#4":{"t":"Scripting","lX":40,"lY":850,"sX":1,"sY":1,"s":"Application Settings","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n\nClientEvents.subscribe(\"editApplicationSettings\", editApplicationSettings);\nClientEvents.subscribe(\"addApplicationSettings\", addApplicationSettings);\n\nconst applicationSettingsTable = Script.getWidget(\"applicationSettingsTable\");\n//deleteApplicationIcon\nClientEvents.subscribe(\"deleteApplicationIcon\", deleteApplicationSettings);\nScript.on('load', function() {\n\tDatabase.readRecords(\"rodent\", \"ApplicationSettings\", function(eventData) {\n\t\tconst applicationSettingsCollection = SensaCollection.load(eventData.value);\n\t\t\n\t\t//id,appname,settings,value\n\t\tapplicationSettingsCollection.renameColumn(\"AppName\", \"App Name\");\n\t\tapplicationSettingsTable.receiveValue(applicationSettingsCollection);\n\t});\n});\n\nfunction editApplicationSettings(eventData) {\n    Script.setState(\"applicationSettingsData\", eventData.value);\n\t//console.log(\"In the app \" + JSON.stringify(eventData.value, null, 4));\n    Script.setState(\"modifyType\", \"edit\");\n    Client.jumpToScreen(\"Edit Application Settings\");\n}\n\n function addApplicationSettings() {\n     Script.setState(\"modifyType\", \"add\");\n     Client.jumpToScreen(\"Edit Application Settings\");\n }\n\nfunction deleteApplicationSettings() {\n\tlet formData = Script.getFormByKey(\"applicationSetting\");\n\tvar ids = formData.applicationSetting.getColumn(\"id\");\n\t\n\tfor (var i = 0; i < ids.length; i++) {\n\t\t applicationSettingsTable.deleteRows(ids[i]);\n\t\t Database.deleteRecord(\"rodent\", \"ApplicationSettings\", \"Id\", ids[i]);\n\t}\n\t\n\tif(ids.length === 0) return;\n\t\n\tvar option = {\"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\"};\n\tClient.confirm(\"Do you want to delete settings\", \"Delete Application Settings\", option).then((eventData) => {\n\t\t\n\t\t//console.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\t\t\n\t\tif(!eventData) return;\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t applicationSettingsTable.deleteRows(ids[i]);\n\t\t\t Database.deleteRecord(\"rodent\", \"ApplicationSettings\", \"Id\", ids[i]);\n\t\t}\n\t});\n}"},"ev":{}},"applicationSettingsTable":{"t":"Table","lX":80,"lY":120,"sX":15.83,"sY":6.74,"s":"Application Settings","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% - 200px","x":"80px","y":"120px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,app name,settings,value","form id":"applicationSetting","form key":"applicationSetting","selectable":"multi + single","display header":"true","title":"Application Settings","colWidths":"0.1558538404175988,0.20432513049962714,0.203579418344519,0.3989560029828486"},"ev":{"clientEvents":{"outputEvents":{"Edit Application Settings":{"channel":"editApplicationSettings/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"editApplicationSettings":{"t":"Container","lX":40,"lY":40,"sX":7,"sY":5.5,"s":"Edit Application Settings","ps":{"enabled":"true","scalingType":"OK","width":"700px","height":"550px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Title"},"ev":{}},"appNameInput":{"t":"Input","lX":80,"lY":100,"sX":6,"sY":1,"s":"Edit Application Settings","ps":{"enabled":"true","scalingType":"NOVERT","width":"600px","height":"6.05%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"applicationSettings","form key":"AppName","label text":"App Name","color":"grey","required":"true","tab index":"1"},"ev":{}},"Text Area#0":{"t":"Text Area","lX":80,"lY":260,"sX":6,"sY":2.5,"s":"Edit Application Settings","ps":{"enabled":"true","scalingType":"OK","width":"600px","height":"250px","x":"80px","y":"260px"},"ver":"190104c210519","dis":false,"tt":"","a":{"form id":"applicationSettings","form key":"Value","color":"grey","label text":"Value","tab index":"3"},"ev":{}},"appSettingsNameInput":{"t":"Input","lX":80,"lY":190,"sX":6,"sY":1,"s":"Edit Application Settings","ps":{"enabled":"true","scalingType":"NOVERT","width":"600px","height":"6.05%","x":"80px","y":"190px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"applicationSettings","form key":"Settings","color":"grey","required":"true","label text":"Settings","tab index":"2"},"ev":{}},"appSettingsEditScript":{"t":"Scripting","lX":30,"lY":595,"sX":1,"sY":1,"s":"Edit Application Settings","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n\nvar userId;\nvar modifyType;\nvar modelTypeId;\nvar applicationSettingsData;\n\n//var appSettingsSubmitButton = Script.getWidget(\"appSettingsSubmitButton\");\nconst editApplicationSettings = Script.getWidget(\"editApplicationSettings\");\n//const cancelSettingsBtn = Script.getWidget(\"cancelSettingsBtn\"); //cancelSettingsBtn\nScript.on('load', function () {\n    /**\n    cancelSettingsBtn.subsribe(\"pressed\", ()=> {\n        Client.jumpToScreen(\"Application Settings\");\n    }); */\n\n    \n    // appSettingsSubmitButton.subsribe(\"pressed\", ()=> {\n    //     switch (modifyType) {\n    //         case 'edit':\n    //             handleEdit();\n    //             break;\n    //         case 'add':\n    //             handleCreate();\n    //             break;\n    //     }\n    // }); \n    modifyType = Script.getState(\"modifyType\");\n    if (modifyType == \"add\") {\n        editApplicationSettings.setTitle(\"New Application Settings\");\n    } else if (modifyType == \"edit\") {\n        applicationSettingsData = Script.getState(\"applicationSettingsData\");\n        editApplicationSettings.setTitle(\"Edit Application Settings\");\n        if (applicationSettingsData != null) {\n            var applicationSettingsObj = {};\n            applicationSettingsObj.AppName = applicationSettingsData.getColumn(\"app name\");\n            applicationSettingsObj.Settings = applicationSettingsData.getColumn(\"settings\");\n            applicationSettingsObj.Value = applicationSettingsData.getColumn(\"value\");\n            //console.log(\"from the app setting \" + JSON.stringify(applicationSettingsObj, null, 4));\n            Script.setForm(\"applicationSettings\", applicationSettingsObj);\n            //debugger;\n        }\n    }\n});\n\nClientEvents.subscribe(\"finishEdittAppSettings\", function () {\n    switch (modifyType) {\n        case 'edit':\n            handleEdit();\n            break;\n        case 'add':\n            handleCreate();\n            break;\n    }\n});\n\nfunction handleEdit() {\n    var formObj = Script.getFormByKey(\"applicationSettings\");\n    if (formObj == undefined) {\n        alert(\"Please fill out all required fields\");\n        return;\n    }\n    var dbReq = {};\n    let applicationSettingsData = Script.getState(\"applicationSettingsData\");\n    let modelId = applicationSettingsData.getColumn(\"id\")[0];\n    formObj.Id = modelId;\n    dbReq[modelId] = formObj;\n    //debugger;\n    Database.updateRecord(\"rodent\", \"ApplicationSettings\", dbReq, () => {\n        Client.jumpToScreen(\"Application Settings\");\n    });\n}\n\nfunction handleCreate() {\n\n    Database.readLastPrimaryKey(\"rodent\", \"ApplicationSettings\", function (eventData) {\n\n        var formObj = Script.getFormByKey(\"ApplicationSettings\");\n        if (formObj == undefined) {\n            alert(\"Please fill out all required fields\");\n            return;\n        }\n        var dbReq = {};\n        let id = parseInt(eventData.value) + 1; ////+applicationSettingsCollection.getColumn(\"Id\")[0] + 1;\n        formObj.Id = `${id}`;\n        dbReq[id] = formObj;\n        //debugger;\n        Database.createRecords(\"rodent\", \"ApplicationSettings\", dbReq, () => {\n            Client.jumpToScreen(\"Application Settings\");\n        });\n\n        /*Database.readRecords(\"rodent\", \"ApplicationSettings\", function(eventData) {\n            let applicationSettingsCollection = SensaCollection.load(eventData.value);\n    \t\n        }); */\n    });\n    //console.log(\"the created Id is \" + lastId);\n\n}"},"ev":{"serverEvents":{"inputEvents":{"database":{"channel":"$DB/ADMIN/MANAGE/RESPONSE","event":"feed"}}}}},"appSettingsSubmitButton":{"t":"Button","lX":560,"lY":525,"sX":1,"sY":1.09,"s":"Edit Application Settings","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"560px","y":"525px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","button name":"Save"},"ev":{"clientEvents":{"outputEvents":{"Submit":{"channel":"finishEdittAppSettings/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addApplicationSettings":{"t":"Icon","lX":1373,"lY":70,"sX":1,"sY":1,"s":"Application Settings","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"3.95%","x":"100% - 130px","y":"70px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"plus-square"},"ev":{"clientEvents":{"outputEvents":{"Add Application Settings":{"channel":"addApplicationSettings/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"IsPrimaryCheck":{"t":"Input","lX":200,"lY":260,"sX":1.2,"sY":1,"s":"Edit User Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"120px","height":"6.26%","x":"200px","y":"260px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","label text":"Is Primary","checkbox label side":"right","form id":"editUser","form key":"IsPrimary"},"ev":{}},"cancelRoleButton":{"t":"Button","lX":370,"lY":260,"sX":1,"sY":1.09,"s":"Edit User Role","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"370px","y":"260px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel"},"ev":{}},"Container#0":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"User Access Role","ps":{"enabled":"true","scalingType":"OK","width":"100% - 80px","height":"100% - 80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"User Access Role","color":"grey"},"ev":{}},"removeUserRole":{"t":"Icon","lX":2193,"lY":80,"sX":1,"sY":1,"s":"User Access Role","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"3.95%","x":"100% - 190px","y":"80px"},"ver":"200628c210519","z":"130","dis":false,"tt":"","a":{"icon file":"trash","outline color":"no outline","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deleteUserRole/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"addNewUserRole":{"t":"Icon","lX":2253,"lY":50,"sX":1,"sY":1,"s":"User Access Role","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"3.95%","x":"100% - 130px","y":"80px"},"ver":"200628c210519","z":"130","dis":false,"tt":"","a":{"icon file":"plus-square","outline color":"no outline"},"ev":{}},"userRoleScript":{"t":"Scripting","lX":20,"lY":815,"sX":1,"sY":1,"s":"User Access Role","ps":{"enabled":"false","scalingType":"OK","width":"5.74%","height":"11.34%","x":"0%","y":"0%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n\n var roleData = [\n    {\n        \"TableName\": \"Sites\", // Specify the primary table used to construct the join request\n        \"Join\": 1, // Join type 1 - Inner Join, 2 - Outer Join, 3 - Left join, 4 - Right Join.\n        \"Columns\":\n            [\n                \"Id\",\n                \"CompanyId\",\n                \"RoleName\",\n                \"CreatedOn\",\n                \"CreatedBy\"\n\n            ],\n\n    }];\nvar userTable = Script.getWidget(\"userTable\");\nconst tableColumns = [\"Role Name\", \"Created On\", \"Created By\"];\nconst addUserBtn = Script.getWidget(\"addNewUserRole\");\n\nvar companyIds;\nvar companyNames;\nvar senseCollectData;\n\nClientEvents.subscribe(\"editCompanyRole\", editCompany); //deleteUserRole\nClientEvents.subscribe(\"deleteUserRole\", deleteCompany);\nScript.on('load', function () {\n\n    addUserBtn.subscribe(\"pressed\", () => {\n        Script.setState(\"modifierType\", \"add\");\n        Client.jumpToScreen(\"Edit User Access Role\");\n    });\n\n    ClientEvents.subscribe(\"clickedUser\", function (eventData) {\n        var formData = Script.getFormByKey(\"userRole\");\n        var ids = formData.userRole.getColumn(\"id\");\n\n    });\n\n\n    Database.readRecords(\"rodent\", \"UserAccessRole\", function (eventData) {\n        senseCollectData = SensaCollection.load(eventData.value);\n        //var accessRoles = SensaCollection.load(eventData.value);\n        var accessRoles = senseCollectData.query((record, pk) => {\n            return true;\n        });\n\n        for (const key in accessRoles.data) {\n            //var date = accessRoles.data[key][34];\n            //console.log(\"Data user is \" + date);\n            //(!isNaN(date) && date != null && data != \"\" && data != undefined)\n            // if (!isNaN(date) && date !== undefined && date !== \"\") {\n            //     console.log(\"Data is 2  user \" + date);\n            //     accessRoles.data[key][34] = formatDate(date);\n            // }\n\n            var createdOn =  accessRoles.data[key][34];\n            var updateOn =  accessRoles.data[key][36];\n        //console.log(\"Created \" + createdOn + \" updated \" + updateOn)\n            if(!isNaN(createdOn) && createdOn !== null  && createdOn !== \"\") {\n                var date = parseInt(createdOn) * 1000;\n                accessRoles.data[key][34] = formatDate(date);\n            } \n\n            if(!isNaN(updateOn) && updateOn !== null  && updateOn !== \"\") {\n                var date = parseInt(updateOn) * 1000;\n                accessRoles.data[key][36] = formatDate(date);\n            }\n\n        }\n\n        accessRoles.renameColumn(\"RoleName\", \"Role Name\");\n        accessRoles.renameColumn(\"CreatedOn\", \"Created On\");\n        accessRoles.renameColumn(\"CreatedBy\", \"Created By\");\n        accessRoles.addColumn(\"Company\");\n        //ClientEvents.publish(\"deleteRows\", \"\");\n        //userTable.receiveValue(companyData); //senseCollectData\n        console.log(\"Val is this \" + JSON.stringify(accessRoles, null, 4));\n        var col = accessRoles.getColumn(\"Role Name\");\n        //console.log(\"Val is this \" + JSON.stringify(col, null, 4));\n        //compDropdown.receiveList(companyNames);\n\n        Database.readRecords(\"rodent\", \"Companies\", function (eventData) {\n            var companyData = SensaCollection.load(eventData.value);\n\n            //console.log(\"company data \" + JSON.stringify(companyData, null, 4));\n            //var companyNames = companyData.getColumn(\"Name\");\n\n            //var compLoc = companyData.getColumn(\"Address\");\n            //var CompanyIds = companyData.getColumn(\"Id\");\n\n            //console.log(\"Val is this name data \" + JSON.stringify(companyNames, null, 4));\n            //console.log(\"Val is this ID data \" + JSON.stringify(CompanyIds, null, 4));\n            for (const id in accessRoles.data) {\n                //console.log(\"Id is 1 \" + id);\n                if (accessRoles.data[id][1] in companyData.data) {\n                    //console.log(\"Id is yes camp \" + accessRoles.data[id][2]);\n                    accessRoles.data[id][accessRoles.columns.indexOf(\"Company\")] = companyData.data[accessRoles.data[id][1]][1];\n                }\n            }\n            //console.log(\"Val is this 2 \" + JSON.stringify(accessRoles, null, 4));\n            ClientEvents.publish(\"deleteRows\", \"\");\n            userTable.receiveValue(accessRoles); //senseCollectData\n\n        });\n\n    });\n});\n\nfunction editCompany(eventData) {\n    //senseCollectData\n    var key = Object.keys(eventData.value.data)[0]\n    eventData.value.data[key][34] = senseCollectData.data[key][34];\n    console.log(\"Val is this 2 \" + JSON.stringify(eventData.value, null, 4));\n    Script.setState(\"userRoleData\", eventData.value);\n    Script.setState(\"modifierType\", \"edit\");\n    Client.jumpToScreen(\"Edit User Access Role\");\n}\n\n\nfunction deleteCompany() {\n    var formData = Script.getFormByKey(\"userRole\");\n    var ids = formData.userRole.getColumn(\"id\");\n\n\n    if (ids.length === 0) return;\n\n    var option = { \"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\" };\n    Client.confirm(\"Do you want to delete access role\", \"Delete User Access Roles\", option).then((eventData) => {\n\n        //console.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\n        if (!eventData) return;\n\n        for (var i = 0; i < ids.length; i++) {\n            userTable.deleteRows(ids[i]);\n            //let req = {};\n            //req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n            Database.deleteRecord(\"rodent\", \"UserAccessRole\", \"Id\", ids[i]);\n        }\n    });\n}\n\nfunction formatDate(today) {\n \n    //return Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n    var date;\n    if(typeof today == \"number\") {\n       date = new Date(today).toLocaleString('en-GB');\n    } else {\n       date = new Date(parseInt(today)).toLocaleString('en-GB');\n    }\n    var d = date.split(\", \");\n    var d0 = d[0].split(\"/\");\n    //d0[2] = Math.abs(d0[2] - 2000);\n    d0 = d0.join(\"/\");\n    //return d[1] + \" \" + d0;\n    return d0 + \" \" + d[1].substring(0, 5);\n}"},"ev":{}},"companyDropDown":{"t":"Dropdown","lX":95,"lY":95,"sX":3.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"320px","height":"11.83%","x":"95px","y":"95px"},"ver":"190104c210519","dis":false,"tt":"","a":{"form id":"addUser","form key":"CompanyId","label text":"Company Name","bold":"true","default options":"","tab index":"1"},"ev":{}},"feature01":{"t":"Input","lX":100,"lY":250,"sX":3.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"320px","height":"11.83%","x":"100px","y":"250px"},"ver":"270520c210519","z":"140","dis":false,"tt":"","a":{"type":"checkbox","form id":"addUser","form key":"Feature01","label text":"Heirarchy Maintenance","color":"grey","tab index":"4"},"ev":{}},"saveUserRoleButton":{"t":"Button","lX":230,"lY":600,"sX":1,"sY":1.09,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"230px","y":"600px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Save","color":"orange strong","text color":"white","tab index":"11"},"ev":{}},"cancelUserRoleButton":{"t":"Button","lX":100,"lY":600,"sX":1,"sY":1.09,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"100px","y":"600px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel","tab index":"10"},"ev":{}},"userRoleAccessScript":{"t":"Scripting","lX":45,"lY":710,"sX":1,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"false","scalingType":"OK","width":"4.2%","height":"11.12%","x":"9.86%","y":"71.86%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nconst compDropdown = Script.getWidget(\"companyDropDown\"); \nconst submitComp = Script.getWidget(\"saveUserRoleButton\");\nconst cancel = Script.getWidget(\"cancelUserRoleButton\");\nconst userRoleEditContainer = Script.getWidget(\"userRoleEditContainer\"); \nconst roleNameInput = Script.getWidget(\"roleNameInput\");\n\nconst feature01 = Script.getWidget(\"feature01\");\nconst feature02 = Script.getWidget(\"feature02\");\nconst feature03 = Script.getWidget(\"feature03\");\nconst feature04 = Script.getWidget(\"feature04\");\nconst feature05 = Script.getWidget(\"feature05\");\n//feature06\nconst feature06 = Script.getWidget(\"feature06\");\nconst features = [feature01, feature02,feature03, feature04, feature05, feature06];\n\nvar CompanyIds;\nvar companyNames;\nvar modifier;\nvar userData;\nvar id;\nvar companyId;\nvar roleName;\nScript.on('load', function() {\n\n\tScript.setState(\"Caller\", \"User Access Role\");\n\tmodifier = Script.getState(\"modifierType\");\n\tuserData = Script.getState(\"userRoleData\");\n\t\n\thandleModifier();\n\tcancel.subscribe(\"pressed\", (eventData) => {\n\t\tClient.jumpToScreen(\"User Access Role\");\n\t\n\t});\n\t\n\tsubmitComp.subscribe(\"pressed\", (eventData) => {\n\t\tconsole.log(\"Button pressed\");\n\t\tconsole.log(JSON.stringify(eventData));\n\n\t\tvar dataType = 1;\n\t\tvar formData = Script.getFormByKey(\"addUser\");\n\t\t\n\t\n\t\tif(formData === undefined){\n\t\t\talert(\"Please fill out all required fields\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar dbData = {};\n\t\t\n\t\tvar status = 1;\n\t\tvar companyName = formData.CompanyId;\n\t\tvar compIndex = companyNames.indexOf(companyName);\n\t\tvar today = new Date().getTime() / 1000;\n\t\ttoday = Math.floor(today);\n\t\t//today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);//new Date().getTime();\n\t\t\n\t\tconsole.log(modifier);\n\t\tif(modifier === \"add\"){\n\t\t\tconsole.log(\"ADDING\");\n\t\t   Database.readLastPrimaryKey(\"rodent\", \"UserAccessRole\", function(eventData){\n\t\t\tconsole.log(\"Last key is \" + eventData.value);\n\t\t\tvar lastId = isNaN(eventData.value) ? 1 : parseInt(eventData.value) + 1;\n\t\t\tvar dbData = {};\n\t\t\t\n\t\t\t\n\t\t\tdbData[lastId] = formData;\n\t\t\t//Database.createRecords(\"rodent\", \"UserAccessRole\", dbData, ()=>{});\n\t\t\tconsole.log(\"data to be stored \" + JSON.stringify(dbData, null, 4));\n\t\t\t\n\t\t\t\n\t\t\tDatabase.saveRecordParam(\"rodent\", \"UserAccessRole\",{ //UserAccessRole\n\t\t\t\t\n\t\t\t\tlastId: {\n\t\t\t\t\t\"Id\": lastId,\n\t\t\t\t\t\"CompanyId\": CompanyIds[compIndex],\n\t\t\t\t\t\"RoleName\": formData.RoleName,\n\t\t\t\t\t\"Status\": 1,\n\t\t\t\t\t\"CreatedBy\": Client.getUser(),\n\t\t\t\t\t\"CreatedOn\": today,\n                    \"Feature01\": +formData.Feature01,\n\t\t\t\t\t\"Feature02\": +formData.Feature02,\n\t\t\t\t\t\"Feature03\": +formData.Feature03,\n\t\t\t\t\t\"Feature04\": +formData.Feature04,\n\t\t\t\t\t\"Feature05\": +formData.Feature05,\n\t\t\t\t\t\"Feature06\": +formData.Feature06,\n\t\t\t\t\t\"ModifiedBy\": Client.getUser(),\n\t\t\t\t\t\"ModifiedOn\": today\n\t\t\t\t}\n\t\t\t\t}, function(dataValue) {\n\t\t\t\t//console.log(\"Data value is : \" + JSON.stringify(dataValue, null, 4));\n\t\t\t\t\t//Client.jumpToScreen(\"User Access Role\");\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t   Client.jumpToScreen(\"User Access Role\");\n\t\t\t});\n\t\t} else if (modifier === \"edit\"){\n\t\t\t\n\t\t\t//var formData = Script.getFormByKey(\"addUser\");\n\t\t\tif (formData == undefined) {\n\t\t\t\talert(\"Please fill out all required fields\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar dbReq = {};\n\t\t\tformData.Id = id;\n\t\t\t//formObj.Status = +formObj.Status;\n\t\t\t//formData.RoleName = roleName;\n\t\t\tformData.CompanyId = companyId;\n\t\t\tformData.Feature01 = +formData.Feature01;\n\t\t\tformData.Feature02 = +formData.Feature02;\n\t\t\tformData.Feature03 = +formData.Feature03;\n\t\t\tformData.Feature04 = +formData.Feature04;\n\t\t\tformData.Feature05 = +formData.Feature05;\n\t\t\tformData.Feature06 = +formData.Feature06;\n\t\t\tformData.ModifiedOn = today;\n\t\t\tformData.ModifiedBy = Client.getUser();\n\t\t\tdbReq[id] = formData;\n\n\t\t\tDatabase.updateRecord(\"rodent\", \"UserAccessRole\", dbReq, () => {\n\t\t\t\tClient.jumpToScreen(\"User Access Role\");\n\t\t\t});\n\t\t}\n\t\t \n\t});\n\t\n\tDatabase.readRecords(\"rodent\", \"Companies\", function(eventData){\n\t\tvar companyData = SensaCollection.load(eventData.value);\n\t\t\n\t\t//console.log(\"company data \" + JSON.stringify(companyData, null, 4));\n\t\tcompanyNames = companyData.getColumn(\"Name\");\n\t\t\n\t\tlet compLoc = companyData.getColumn(\"Address\");\n\t\tCompanyIds = companyData.getColumn(\"Id\");\n\t\t\n\t\t//console.log(\"name data \" + JSON.stringify(companyNames, null, 4));\n\t\tif(modifier === \"edit\"){\n\t\t   for(let i = 0; i < CompanyIds.length; i++){\n\t\t\t\tif(CompanyIds[i] === companyId) {\n\t\t\t\t\tcompDropdown.receiveValue(companyNames[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(\"ACCCC \" + JSON.stringify(companyNames, null, 4));\n\t\t\tcompDropdown.receiveList(companyNames);\n\t\t}\n\t\t\n\t});\n});\n\nfunction handleModifier(){\n\n\tswitch(modifier) {\n\t\n\t\tcase \"add\":\n\t\t\t//handle add\n\t\t\tconsole.log(\"it is add\");\n\t\t\taddUserRole();\n\t\t\tbreak;\n\t\tcase \"edit\":\n\t\t\t//handle edit \n\t\t\tconsole.log(\"it is edit\");\n\t\t\teditForm();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log(\"go back\");\n\t\t\tClient.jumpToScreen(\"User Access Role\");\n\t\t\tbreak;\n\t}\n}\n\nfunction editForm(){\n\t userRoleEditContainer.setTitle(\"Edit User Role\");\n\t\n\tvar data = Object.values(userData.data)[0];\n\tid = data[0];\n\tcompanyId = data[1];\n\troleName = data[2];\n\troleNameInput.receiveValue(roleName);\n\t\n\tfor(let i = 0; i < features.length; i++) {\n\t\tfeatures[i].receiveValue(data[i + 3]);\n\t}\n\t//var name;\n\n    return;\n\t\n}\n\nfunction addUserRole(){\n\tuserRoleEditContainer.setTitle(\"New User Role\");\n    return;\n}"},"ev":{}},"userTable":{"t":"Table","lX":80,"lY":130,"sX":15.83,"sY":6.64,"s":"User Access Role","ps":{"enabled":"true","scalingType":"OK","width":"100% - 160px","height":"100% - 210px","x":"80px","y":"130px"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"role name,created on,created by,company","selectable":"multi + single","enable search":"true","form id":"userRole","form key":"userRole","colWidths":"0.24091233071988596,0.24162508909479685,0.24019957234497505,0.24162508909479685"},"ev":{"clientEvents":{"inputEvents":{"deleteUserRows":{"channel":"deleteRows/delete all rows","event":"delete all rows","important":"false"}},"outputEvents":{"clickerUser":{"channel":"clickedUser/receive value","event":"pressed","trigger":"pressed","important":"false"},"editCompanyRole":{"channel":"editCompanyRole/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"userRoleEditContainer":{"t":"Container","lX":40,"lY":40,"sX":4.2,"sY":6.5,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"OK","width":"420px","height":"650px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Title"},"ev":{}},"roleNameInput":{"t":"Input","lX":95,"lY":170,"sX":2.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"220px","height":"11.83%","x":"95px","y":"170px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"addUser","form key":"RoleName","required":"true","label text":"Role Name","tab index":"2","color":"grey"},"ev":{}},"cancelProduct":{"t":"Button","lX":200,"lY":380,"sX":1,"sY":1.09,"s":"Edit Product","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"200px","y":"380px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel"},"ev":{}},"Container#2":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Manage Master Products","ps":{"enabled":"true","scalingType":"OK","width":"100%-80px","height":"100%-80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"Manage Master Products"},"ev":{}},"Container#3":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"User Roles","ps":{"enabled":"true","scalingType":"OK","width":"100% - 80px","height":"100% - 80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"User Roles","color":"grey"},"ev":{}},"cancelErrorCode":{"t":"Button","lX":370,"lY":620,"sX":1,"sY":1.09,"s":"Edit Error Codes","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"370px","y":"620px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel"},"ev":{}},"Container#4":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Error Codes","ps":{"enabled":"true","scalingType":"OK","width":"100%- 80px","height":"100%- 80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"Error Codes","color":"grey"},"ev":{}},"Container#5":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Manage Companies","ps":{"enabled":"true","scalingType":"OK","width":"100%-80px","height":"100%-80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"Manage Companies","color":"grey"},"ev":{}},"canceCompanyBtn":{"t":"Button","lX":370,"lY":240,"sX":1,"sY":1.09,"s":"Edit Company","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"370px","y":"270px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel"},"ev":{}},"Container#6":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Manage Model Types","ps":{"enabled":"true","scalingType":"OK","width":"100%-80px","height":"100%-80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"Manage Model Type","color":"grey"},"ev":{}},"cancelModelType":{"t":"Button","lX":425,"lY":315,"sX":1,"sY":1.09,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"OK","width":"100px","height":"50px","x":"370px","y":"170px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel"},"ev":{}},"Container#7":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Manage Device Models","ps":{"enabled":"true","scalingType":"OK","width":"100%-80px","height":"100%-80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"Manage Device Models","color":"grey"},"ev":{}},"cancelModelBtn":{"t":"Button","lX":60,"lY":380,"sX":1,"sY":1.09,"s":"Edit Model","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"150px","y":"380px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel"},"ev":{}},"Container#8":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":7.94,"s":"Application Settings","ps":{"enabled":"true","scalingType":"OK","width":"100%-80px","height":"100%-80px","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"title":"Application Settings","color":"grey"},"ev":{}},"cancelSettingsBtn":{"t":"Button","lX":410,"lY":525,"sX":1,"sY":1.09,"s":"Edit Application Settings","ps":{"enabled":"true","scalingType":"OK","width":"100px","height":"50px","x":"410px","y":"525px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Cancel","jump to screen":"Application Settings"},"ev":{}},"feature02":{"t":"Input","lX":100,"lY":310,"sX":3.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"320px","height":"11.83%","x":"100px","y":"310px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"addUser","form key":"Feature02","label text":"Device Provisioning","color":"grey","tab index":"5"},"ev":{}},"addModelIcon":{"t":"Icon","lX":208,"lY":870,"sX":1,"sY":1,"s":"Manage Device Models","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.16%","x":"100% - 130px","y":"50px"},"ver":"200628c210519","dis":false,"tt":"","a":{"icon file":"plus-square","outline color":"no outline"},"ev":{"clientEvents":{"outputEvents":{"Add Model":{"channel":"addModel/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"deleteApplicationIcon":{"t":"Icon","lX":1313,"lY":70,"sX":1,"sY":1,"s":"Application Settings","ps":{"enabled":"true","scalingType":"NOHORIZ,NOVERT","width":"50px","height":"6.29%","x":"100% - 190px","y":"70px"},"ver":"200628c210519","dis":false,"tt":"","a":{"outline color":"no outline","icon file":"trash","hover":"red"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"deleteApplicationIcon/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"managerMasterProductScript":{"t":"Scripting","lX":35,"lY":850,"sX":1,"sY":1,"s":"Manage Master Products","ps":{"enabled":"false","scalingType":"OK","width":"4.2%","height":"14.29%","x":"2.31%","y":"126.43%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar productCollection;\n// Default\nvar status = \"Show Active\";\n\nconst productsTable = Script.getWidget(\"masterProductsTable\");\n\nScript.on('load', function() {\n\t\n\tDatabase.readRecords(\"rodent\", \"Products\", function(eventData) {\n\t\tproductCollection = SensaCollection.load(eventData.value);\n\t\tconsole.log(\" data in the big comp \" + JSON.stringify(productCollection, null, 4));\n\t\tupdateTable();\n\t});\n});\n\nClientEvents.subscribe(\"productSelected\", editProduct);\nClientEvents.subscribe(\"removeMasterProducts\", removeProductFromCompany);\nClientEvents.subscribe(\"addNewMasterProduct\", createNewProduct);\nClientEvents.subscribe(\"changeActive\", (eventData) => {\n\tstatus = eventData.value; \n\tDatabase.readRecords(\"rodent\", \"Products\", function(eventData) {\n\t\tproductCollection = SensaCollection.load(eventData.value);\n\t\tupdateTable();\n\t});\n\tif (status !== \"Show Active\") {\n\t\t// Do not attempt to delete inactive elements\n\t\tScript.hideWidget(\"deleteMasterProdIcon\");\n\t\t//Script.disableWidget(\"addMasterProdIcon\");\n\t} else {\n\t\t// Re-enable widgets if disabled before\n\t\tScript.showWidget(\"deleteMasterProdIcon\");\n\t\t//Script.enableWidget(\"addMasterProdIcon\");\n\t}\n});\n\nfunction editProduct(eventData) {\n\tScript.setState(\"productInfo\", eventData.value);\n\tScript.setState(\"modifyType\", \"edit_master\");\n\tScript.setState(\"masterProduct\", \"master\");\n\tClient.jumpToScreen(\"Edit Product\");\n}\n\nfunction updateTable() {\n\t//status = Script.getFormByKey(\"master\").activeSelection == \"Show Active\" ? '1' : '0';\n\tlet filteredComps = productCollection.query((record, pk) => {\n\t\tif (record['Status'] == (status == \"Show Active\")){\n\t\t\treturn true;\n\t\t}\n\t});\n\t\n\tClientEvents.publish(\"compDelRows\", \"\");\n\tvar tableComps = filteredComps.filter([\"Id\", \"Name\", \"Expiry\", \"WeightPerBlock\"]);\n\ttableComps.setColumns([\"Id\", \"Name\", \"Expiry\", \"Weight Per Block\"]);\n\tproductsTable.receiveValue(tableComps);\n}\n\nfunction createNewProduct(eventData) {\n\tScript.setState(\"modifyType\", \"add_master\");\n\tScript.setState(\"masterProduct\", \"master\");\n\tClient.jumpToScreen(\"Edit Product\");\n}\n\nfunction removeProductFromCompany() {\n\n\tvar formData =  Script.getFormByKey(\"master\");\n\tvar ids = formData.products.getColumn(\"id\");\n\t\n\tif(ids.length === 0) return;\n\t\n\tvar option = {\"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\"};\n\tClient.confirm(\"Do you want to delete Company Records?\", \"Delete Records\", option).then((eventData) => {\n\t\t\n\t\t//console.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n\t\t\n\t\tif(!eventData) return;\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\tproductsTable.deleteRows(ids[i]);\n\t\t\t//let req = {};\n\t\t\t//req[{\"Id\": ids[i], \"Status\": \"0\"}] = {\"Id\": ids[i], \"Status\": \"0\"};\n\t\t\t//Database.updateRecord(\"rodent\", \"Products\", req);\n\t\t\tDatabase.deleteRecord(\"rodent\", \"Products\", \"Id\", ids[i]);\n\t\t}\n\t});\n\t//var selectedOption = await promise;\n\t//console.log(\"Ids are \" + ids);\n\t//console.log(\"Promise is \" + JSON.stringify(promise, null, 4));\n\t\n\t\n}"},"ev":{}},"manageCompanyStatus":{"t":"Dropdown","lX":1983,"lY":84,"sX":3,"sY":1,"s":"Manage Companies","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"5.51%","x":"100% - 385px","y":"84px"},"ver":"190104c210519","z":"140","dis":false,"tt":"","a":{"default options":"Show Active,Show Inactive","default value":"Show Active"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"changeActiveCompany/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"errorCodeStatus":{"t":"Dropdown","lX":442,"lY":113,"sX":3,"sY":1,"s":"Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"7.57%","x":"50% - 342px","y":"113px"},"ver":"190104c210519","z":"140","dis":false,"tt":"","a":{"default value":"Show Active","default options":"Show Active, Show Inactive"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"changeActiveError/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"manageMasterStatus":{"t":"Dropdown","lX":1983,"lY":105,"sX":3,"sY":1,"s":"Manage Master Products","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"7.57%","x":"100% - 385px","y":"105px"},"ver":"190104c210519","z":"130","dis":false,"tt":"","a":{"default options":"Show Active, Show Inactive","default value":"Show Active"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"changeActive/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"errorCodeStatusFile":{"t":"Dropdown","lX":1194,"lY":115,"sX":3,"sY":1,"s":"Error Codes","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"7.2%","x":"100% - 375px","y":"113px"},"ver":"190104c210519","dis":false,"tt":"","a":{"default value":"Show Active","default options":"Show Active, Show Inactive"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"changeActiveFiles/receive value","event":"selected","trigger":"selected","important":"false"}}}}},"Scripting#8df":{"t":"Scripting","lX":70,"lY":480,"sX":1,"sY":1,"s":"Edit Product","ps":{"enabled":"false","scalingType":"OK","width":"5.74%","height":"11.34%","x":"38.44%","y":"70.86%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar prodId;\nvar modifyType;\nvar masterProduct;\nconst prodFormContainer = Script.getWidget(\"productFormContainer\");\nconst prodSubmitButton = Script.getWidget(\"prodSubmitButton\");\nconst cancelProduct = Script.getWidget(\"cancelProduct\");\nScript.on('load', function () {\n\n    masterProduct = Script.getState(\"masterProduct\");\n\n    cancelProduct.subscribe(\"pressed\", () => {\n        jumpScreen();\n        //Client.jumpToScreen(\"Manage Products\");\n    });\n    modifyType = Script.getState(\"modifyType\");\n\n    if (!modifyType) {\n\n        jumpScreen();\n        //Client.jumpToScreen(\"Manage Products\");\n    }\n    var productData;\n\n    if (modifyType.startsWith(\"add\")) {\n        prodFormContainer.setTitle(\"New Product\");\n        return;\n    } else if (modifyType == \"edit\") {\n        productData = Script.getState(\"compProductInfo\");\n    } else if (modifyType == \"edit_master\") {\n        productData = Script.getState(\"productInfo\");\n    }\n    var prodObj = {}\n    prodId = productData.getColumn(\"id\")[0];\n    prodObj.Name = productData.getColumn(\"name\");\n    prodObj.Status = productData.getColumn(\"status\");\n    prodObj.WeightPerBlock = productData.getColumn(\"weight per block\");\n    prodObj.Expiry = productData.getColumn(\"expiry\");\n\n    Script.setForm(\"editProduct\", prodObj);\n    prodFormContainer.setTitle(\"Edit Product\");\n});\n\nClientEvents.subscribe(\"finishEditProduct\", function () {\n    switch (modifyType) {\n        case 'edit':\n            handleEdit();\n            break;\n        case 'edit_master':\n            handleEditMaster();\n            break;\n        case 'add':\n            handleCreate();\n            break;\n        case 'add_master':\n            handleCreateMaster();\n            break;\n    }\n});\n\n\nfunction jumpScreen() {\n\n    if (masterProduct === \"master\") {\n        Client.jumpToScreen(\"Manage Master Products\");\n    } else if (masterProduct === \"product\") {\n        Client.jumpToScreen(\"Manage Products\");\n    }\n\n}\nfunction handleEdit() {\n    var formObj = Script.getFormByKey(\"editProduct\");\n    if (formObj == undefined) {\n        alert(\"Please fill out all required fields\");\n        return;\n    }\n\n    var dbReq = {};\n    var companyProducts = Script.getState(\"companyProducts\");\n    formObj.Id = prodId;\n    formObj.Status = +formObj.Status;\n    let today = new Date().getTime() / 1000;\n    console.log(\"Inside 3\" + today);\n    //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n    formObj.UpdatedOn = Math.floor(today);\n    formObj.UpdatedBy = Client.getUser();\n    dbReq[prodId] = formObj;\n\n    Database.updateRecord(\"rodent\", \"CompanyProducts\", dbReq, () => {\n        //Script.setState(\"currentCompany\", formObj.CompanyId);\n        Client.jumpToScreen(\"Manage Products\");\n    });\n}\n\nfunction handleEditMaster() {\n    var formObj = Script.getFormByKey(\"editProduct\");\n    if (formObj == undefined) {\n        alert(\"Please fill out all required fields\");\n        return;\n    }\n\n    var dbReq = {};\n    formObj.Id = prodId;\n    formObj.Status = +formObj.Status;\n    let today = new Date().getTime() / 1000;\n    console.log(\"Inside 2\" + today);\n    //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n    formObj.UpdatedOn = Math.floor(today);\n    formObj.UpdatedBy = Client.getUser();\n    dbReq[prodId] = formObj;\n\n    Database.updateRecord(\"rodent\", \"Products\", dbReq, (dataCreated) => {\n        console.log(\"Master edit is \" + JSON.stringify(dataCreated, null, 4));\n        Client.jumpToScreen(\"Manage Master Products\");\n    });\n}\n\nfunction handleCreate() {\n    Database.readRecords(\"rodent\", \"CompanyProducts\", function (eventData) {\n        var compProductCollection = SensaCollection.load(eventData.value);\n        var formObj = Script.getFormByKey(\"editProduct\");\n\n        if (formObj == undefined) {\n            alert(\"Please fill out all required fields\");\n            return;\n        }\n\n        var dbReq = {};\n        var compProdCount = Object.keys(compProductCollection.data).length;\n        formObj.Id = `${compProdCount + 1}`;\n        formObj.Status = +formObj.Status;\n\n        let today = new Date().getTime() / 1000;\n        //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n        console.log(\"Inside 1\" + today);\n        formObj.CreatedOn = Math.floor(today);\n        formObj.UpdatedOn = Math.floor(today);\n        formObj.Owner = Client.getUser();\n        formObj.CreatedBy = Client.getUser();\n        formObj.UpdatedBy = Client.getUser();\n        formObj.CompanyId = Script.getState(\"companyId\");\n        dbReq[compProdCount + 1] = formObj;\n\n        Database.createRecords(\"rodent\", \"CompanyProducts\", dbReq, () => {\n            Script.setState(\"currentCompany\", formObj.CompanyId);\n            Client.jumpToScreen(\"Manage Products\");\n        });\n    });\n}\n\nfunction handleCreateMaster() {\n    Database.readRecords(\"rodent\", \"Products\", function (eventData) {\n        var productCollection = SensaCollection.load(eventData.value);\n        var formObj = Script.getFormByKey(\"editProduct\");\n\n        if (formObj == undefined) {\n            alert(\"Please fill out all required fields\");\n            return;\n        }\n\n        var dbReq = {};\n        var compProdCount = Object.keys(productCollection.data).length;\n\n        formObj.Id = `${parseInt(compProdCount) + 1}`;\n        formObj.Status = +formObj.Status;\n\n        let today = new Date().getTime() / 1000;\n        console.log(\"Inside 4\" + today);\n        //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n        formObj.CreatedOn = Math.floor(today);\n        formObj.UpdatedOn = Math.floor(today);\n        formObj.Owner = Client.getUser();\n        formObj.CreatedBy = Client.getUser();\n        formObj.UpdatedBy = Client.getUser();\n        dbReq[compProdCount + 1] = formObj;\n        //console.log(\"Master created is \" + JSON.stringify(dbReq, null, 4));\n        /**Database.createRecords(\"rodent\", \"Products\", dbReq, (dataCreated) => {\n            console.log(\"Master created is \" + JSON.stringify(dataCreated, null, 4));\n            Client.jumpToScreen(\"Manage Master Products\");\n        }); */\n        var id = formObj.Id;\n        Database.saveRecordParam(\"Rodent\", \"Products\", {\n\n            id: {\n                \"Id\": formObj.Id,\n                \"Name\": formObj.Name, //new Date().getTime(),\n                \"Expiry\": formObj.Expiry,//,deviceNum,\n                \"WeightPerBlock\": formObj.WeightPerBlock,\n                \"Status\": formObj.Status,\n                \"CreatedOn\": today,\n                \"UpdatedOn\": today,\n                \"Owner\": Client.getUser(),\n                \"CreatedBy\": Client.getUser(),\n                \"UpdatedBy\": Client.getUser()\n\n            }\n\n        }, function (data) {\n            //console.log(\"inisde save: \" + selected.Id.toString() + \" data is \" + JSON.stringify(data, null, 4));\n            Client.jumpToScreen(\"Manage Master Products\");\n        });\n\n\n    });\n\n\n}"},"ev":{}},"editManageCompanyScript":{"t":"Scripting","lX":45,"lY":440,"sX":1,"sY":1,"s":"Edit Company","ps":{"enabled":"false","scalingType":"OK","width":"9.07%","height":"8.26%","x":"4.53%","y":"35.92%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var companyId;\n var modifyType;\n const companyContainer = Script.getWidget(\"companyContainer\");\n const companySubmitButton = Script.getWidget(\"companySubmitButton\");\n const canceCompanyBtn = Script.getWidget(\"canceCompanyBtn\");\n Script.on('load', function() {\n     \n     canceCompanyBtn.subscribe(\"pressed\", ()=> {\n          Client.jumpToScreen(\"Manage Companies\");\n     });\n     modifyType = Script.getState(\"modifyType\");\n     var companyData;\n \n     if (modifyType == \"add\") {\n         companyContainer.setTitle(\"New Company\");\n         return;\n     } else if (modifyType == \"edit\") {\n         companyData = Script.getState(\"companyData\");\n     }\n \n     var companyObj = {}\n     companyId = companyData.getColumn(\"id\")[0];\n     companyObj.Name = companyData.getColumn(\"name\");\n     companyObj.Address = companyData.getColumn(\"address\");\n     companyObj.Status = companyData.getColumn(\"status\");\n \n     Script.setForm(\"companyform\", companyObj);\n     companyContainer.setTitle(\"Edit Company\");\n });\n \n ClientEvents.subscribe(\"finishSubmitCompany\", function() {\n     switch (modifyType) {\n         case 'edit':\n             handleEdit();\n             break;\n         case 'add':\n             handleCreate();\n             break;\n     }\n });\n \n function handleEdit() {\n     var formObj = Script.getFormByKey(\"companyform\");\n     if (formObj == undefined) {\n         alert(\"Please fill out all required fields\");\n         return;\n     }\n         \n     var dbReq = {};\n     formObj.Id = companyId;\n     formObj.Status = +formObj.Status;\n     let today = new Date().getTime() / 1000;\n     // today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n     formObj.UpdatedOn = Math.floor(today);\n     formObj.UpdatedBy = Client.getUser();\n     dbReq[companyId] = formObj;\n         \n     Database.updateRecord(\"rodent\", \"Companies\", dbReq, () => {\n         Client.jumpToScreen(\"Manage Companies\");\n     });\n }\n \n function handleCreate() {\n     \n     \n     Database.readLastPrimaryKey(\"rodent\",\"Companies\",function(eventData){\n     \n     //var lastId = eventData.value;\n          //var primaryKey = isNaN(lastId) ? 1 : parseInt(lastId) + 1;\n          //var primaryKey = null;\n          var devId;\n          if(eventData.value === null || eventData.value === undefined || isNaN(eventData.value)) {\n              devId = 1;\n          } else {\n              devId = parseInt(eventData.value) + 1;\n          }\n \n         //var companyCollection = SensaCollection.load(eventData.value);\n         var formObj = Script.getFormByKey(\"companyform\");\n         \n         if (formObj == undefined) {\n             alert(\"Please fill out all required fields\");\n             return;\n         }\n \n         console.log(\"New devId is \" + devId);\n         var dbReq = {};\n         //var companyCount = Object.keys(companyCollection.data).length;\n         formObj.Id = devId;\n         formObj.Status = +formObj.Status;\n \n         let today = new Date().getTime() / 1000;\n         today = Math.floor(today);\n         //today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n         formObj.CreatedOn = today;\n         formObj.UpdatedOn = today;\n         formObj.CreatedBy = Client.getUser();\n         formObj.UpdatedBy = Client.getUser();\n         dbReq[devId] = formObj;\n \n         /*\n        Database.createRecords(\"rodent\", \"Companies\", dbReq, () => {\n             \n             Client.jumpToScreen(\"Manage Companies\");\n         }); */\n         \n         \n         var id = formObj.Id;\n         //console.log(\"Saving Company\");\n         Database.saveRecordParam(\"Rodent\", \"Companies\", {\n              devId: {\n                  \"Id\": devId,\n                  \"Name\": formObj.Name, //new Date().getTime(),\n                  \"Address\": formObj.Address,//,deviceNum,\n                  \"Status\": formObj.Status,\n                  \"CreatedOn\": today,\n                  \"UpdatedOn\" : today,\n                  \"Owner\": Client.getUser(),\n                  \"CreatedBy\": Client.getUser(),\n                  \"UpdatedBy\": Client.getUser()\n              }\n \n          }, function (data) {\n              Client.jumpToScreen(\"Manage Companies\");\n         }); \n         console.log(\"after company save\");\n \n     \n       /*   \n     Database.readRecords(\"rodent\", \"Companies\", function(eventData) {\n         var companyCollection = SensaCollection.load(eventData.value);\n         var formObj = Script.getFormByKey(\"companyform\");\n         \n         if (formObj == undefined) {\n             alert(\"Please fill out all required fields\");\n             return;\n         }\n \n         var dbReq = {};\n         var companyCount = Object.keys(companyCollection.data).length;\n         formObj.Id = `${companyCount + 1}`;\n         formObj.Status = +formObj.Status;\n \n         let today = new Date();\n         today = Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n         formObj.CreatedOn = today;\n         formObj.UpdatedOn = today;\n         formObj.CreatedBy = Client.getUser();\n         formObj.UpdatedBy = Client.getUser();\n         dbReq[companyCount + 1] = formObj;\n \n        /** Database.createRecords(\"rodent\", \"Companies\", dbReq, () => {\n             \n             Client.jumpToScreen(\"Manage Companies\");\n         });\n         \n         var id = formObj.Id;\n         Database.saveRecordParam(\"Rodent\", \"Companies\", {\n \n              id: {\n                  \"Id\": formObj.Id,\n                  \"Name\": formObj.Name, //new Date().getTime(),\n                  \"Address\": formObj.Address,//,deviceNum,\n                  \"Status\": formObj.Status,\n                  \"CreatedOn\": today,\n                  \"UpdatedOn\" : today,\n                  \"Owner\": Client.getUser(),\n                  \"CreatedBy\": Client.getUser(),\n                  \"UpdatedBy\": Client.getUser()\n                 \n              }\n \n          }, function (data) {\n              //console.log(\"inisde save: \" + selected.Id.toString() + \" data is \" + JSON.stringify(data, null, 4));\n              Client.jumpToScreen(\"Manage Companies\");\n         });\n     }); */\n     });\n }"},"ev":{}},"feature05":{"t":"Input","lX":100,"lY":490,"sX":3.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"320px","height":"11.83%","x":"100px","y":"490px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","label text":"Clear Errors","form id":"addUser","form key":"Feature05","tab index":"8"},"ev":{}},"userRolesScripts":{"t":"Scripting","lX":65,"lY":790,"sX":1,"sY":1,"s":"User Roles","ps":{"enabled":"false","scalingType":"OK","width":"9.07%","height":"8.26%","x":"77.06%","y":"4.95%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n var userRolesCollection;\n var currentCompany;\n const maxUnixtime = 2147483647;\n const userRolesTable = Script.getWidget(\"userRolesTable\");\n const compDropdown = Script.getWidget(\"usersCompanyDropdown\");\n \n Script.on('load', function () {\n     Database.readRecords(\"rodent\", \"Companies\", function (eventData) {\n         let companyCollection = SensaCollection.load(eventData.value);\n \n         console.log(\"Companies are \" + JSON.stringify(companyCollection, null, 4));\n         Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n             userRolesCollection = SensaCollection.load(eventData.value);\n             let filteredUsers = userRolesCollection.query((record, pk) => {\n                 if (record['User'] == Client.getUser()) {\n                     return true;\n                 }\n             });\n             var userCompanies = filteredUsers.getColumn(\"CompanyId\");\n \n             //var filteredCompanies = userCompanies;\n \n             let filteredCompanies = companyCollection.query((record, pk) => {\n                 //if (userCompanies.includes(pk)) {\n                 return true;\n                 //}\n             });\n \n             let compNames = filteredCompanies.getColumn(\"Name\");\n             let compLoc = filteredCompanies.getColumn(\"Address\");\n             let compIds = filteredCompanies.getColumn(\"Id\");\n \n             currentCompany = Script.getState(\"currentCompany\");\n             if (currentCompany == null) {\n                 currentCompany = compIds[0];\n             }\n \n             let compObj = {};\n             compIds.map((comp, idx) => {\n                 compObj[comp] = compNames[idx] + \", \" + compLoc[idx];\n             });\n \n             Object.keys(compObj).forEach((comp, idx) => {\n                 filteredCompanies.set({ \"Id\": comp, \"Name\": compObj[comp] });\n             });\n \n             filteredCompanies.renameColumn(\"Name\", \"text\");\n             filteredCompanies.renameColumn(\"Id\", \"value\");\n \n             compDropdown.receiveTextValues(filteredCompanies);\n             compDropdown.receiveValue(compObj[currentCompany]);\n \n             updateTable();\n         });\n     });\n });\n \n ClientEvents.subscribe(\"usrCcompSelected\", changeCompany);\n ClientEvents.subscribe(\"userEdit\", editUser);\n ClientEvents.subscribe(\"newUser\", createNewUser);\n ClientEvents.subscribe(\"deleteUsers\", deleteUsers);\n \n async function changeCompany(selected) {\n     currentCompany = selected.value;\n \n     Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n         userRolesCollection = SensaCollection.load(eventData.value);\n         updateTable();\n     });\n }\n \n function updateTable() {\n     let filteredUsers = userRolesCollection.query((record, pk) => {\n         if ((record['CompanyId'] == currentCompany) &&\n             (record['Status'] == '1')) {\n             return true;\n         }\n     });\n \n     for (const key in filteredUsers.data) {\n\n         var createdOn = filteredUsers.data[key][3];\n         var updateOn = filteredUsers.data[key][4];\n         //console.log(\"Data user is \" + date);\n         //(!isNaN(date) && date != null && data != \"\" && data != undefined)\n         if (!isNaN(updateOn) && updateOn !== null && updateOn !== \"\") {\n            var date = parseInt(updateOn);\n            if(date < maxUnixtime) {\n                date = date * 1000;\n            }\n            filteredUsers.data[key][4] = formatDate(date);\n         }\n\n         if (!isNaN(createdOn) && createdOn !== null && createdOn !== \"\") {\n            //console.log(\"Data is 2  user \" + date);\n            var date = parseInt(createdOn);\n            if(date < maxUnixtime) {\n                date = date * 1000;\n            }\n            filteredUsers.data[key][3] = formatDate(date);\n        }\n     }\n \n     var tableCollection = filteredUsers.filter([\"Id\", \"User\", \"UpdatedOn\", \"UpdatedBy\", \"IsAdmin\", \"IsPrimary\"]);\n     tableCollection.setColumns([\"Id\", \"User\", \"Updated On\", \"Updated By\", \"Is Admin\", \"Is Primary\"]);\n \n     ClientEvents.publish(\"usrDelRows\", \"\");\n     userRolesTable.receiveValue(tableCollection);\n }\n \n function editUser(eventData) {\n     //userRolesCollection\n     var key = Object.keys(eventData.value.data)[0]\n     eventData.value.data[key][4] = userRolesCollection.data[key][4];\n     Script.setState(\"userRoleInfo\", eventData.value);\n     //console.log(\"User event data \" + JSON.stringify(eventData.value, null, 4));\n     Script.setState(\"companyId\", currentCompany);\n \n     //console.log(\"User company \" + currentCompany);\n     Script.setState(\"modifyType\", \"edit\");\n     Client.jumpToScreen(\"Edit User Role\");\n }\n \n function createNewUser() {\n     Script.setState(\"companyId\", currentCompany);\n     Script.setState(\"modifyType\", \"add\");\n     Client.jumpToScreen(\"Edit User Role\");\n }\n \n function deleteUsers() {\n     let formData = Script.getFormByKey(\"roles\");\n     var ids = formData.users.getColumn(\"id\");\n \n     if (ids.length === 0) return;\n     var option = { \"confirmText\": \"Confirm\", \"cancelText\": \"Cancel\" };\n     Client.confirm(\"Do you want to delete user role?\", \"Delete User Roles\", option).then((eventData) => {\n \n         //console.log(\"Return data is  is \" + JSON.stringify(eventData, null, 4));\n \n         if (!eventData) return;\n         // your code here\n         for (var i = 0; i < ids.length; i++) {\n             userRolesTable.deleteRows(ids[i]);\n             Database.deleteRecord(\"rodent\", \"UserRoles\", \"Id\", ids[i]);\n         }\n     });\n \n }\n \n function formatDate(today) {\n \n    //return Utils.formatDate(today, \"dd/MM/yyyy HH:mm\", false);\n    var date;\n    if(typeof today == \"number\") {\n       date = new Date(today).toLocaleString('en-GB');\n    } else {\n       date = new Date(parseInt(today)).toLocaleString('en-GB');\n    }\n    var d = date.split(\", \");\n    var d0 = d[0].split(\"/\");\n    //d0[2] = Math.abs(d0[2] - 2000);\n    d0 = d0.join(\"/\");\n    //return d[1] + \" \" + d0;\n    return d0 + \" \" + d[1].substring(0, 5);\n}","file name":"../../js/settings/manage user roles/manageUserRoles.js"},"ev":{}},"feature03":{"t":"Input","lX":100,"lY":370,"sX":3.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"320px","height":"11.83%","x":"100px","y":"370px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"addUser","form key":"Feature03","label text":"Create Site Events","color":"grey","tab index":"6"},"ev":{}},"feature04":{"t":"Input","lX":100,"lY":430,"sX":3.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"320px","height":"11.83%","x":"100px","y":"430px"},"ver":"270520c210519","z":"130","dis":false,"tt":"","a":{"type":"checkbox","form id":"addUser","form key":"Feature04","label text":"Device Actions","color":"grey","tab index":"7"},"ev":{}},"feature06":{"t":"Input","lX":100,"lY":550,"sX":3.2,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"true","scalingType":"NOVERT","width":"320px","height":"11.83%","x":"100px","y":"550px"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","label text":"Manage Floor Map","form id":"addUser","form key":"Feature06","tab index":"9"},"ev":{}},"Input#8":{"t":"Input","lX":80,"lY":140,"sX":2,"sY":1,"s":"Packet 6 Transactions","ps":{"enabled":"true","scalingType":"NOVERT","width":"200px","height":"6.06%","x":"80px","y":"137px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"device-info","form key":"device-number","label text":"Device Number (eg. 999044)"},"ev":{}},"Display Transactions":{"t":"Button","lX":300,"lY":140,"sX":1.8,"sY":1.09,"s":"Packet 6 Transactions","ps":{"enabled":"true","scalingType":"OK","width":"180px","height":"50px","x":"300px","y":"140px"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Display Transactions","color":"orange strong","outline color":"grey","text color":"white"},"ev":{"clientEvents":{"outputEvents":{"displayTransactions":{"channel":"displayTransactions/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"downloadData":{"t":"Button","lX":1425,"lY":140,"sX":1.8,"sY":1.09,"s":"Packet 6 Transactions","ps":{"enabled":"true","scalingType":"OK","width":"180px","height":"50px","x":"100% - 260px","y":"140px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"button name":"Download Data","color":"orange strong","outline color":"grey","text color":"white"},"ev":{}},"isSmartCheckbox":{"t":"Input","lX":215,"lY":320,"sX":0.85,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"NOVERT","width":"7.71%","height":"11%","x":"75px","y":"170px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modalTypeForm","form key":"IsSmart","type":"checkbox","default value":"1","label text":"Smart","checkbox label side":"right"},"ev":{}},"isDefaultCheckbox":{"t":"Input","lX":295,"lY":320,"sX":0.95,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"NOVERT","width":"8.61%","height":"11%","x":"75px","y":"170px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modalTypeForm","form key":"IsDefault","type":"checkbox","label text":"Default","checkbox label side":"right"},"ev":{}},"Input#9":{"t":"Input","lX":80,"lY":250,"sX":3,"sY":1,"s":"Edit Model","ps":{"enabled":"false","scalingType":"NOVERT","width":"300px","height":"10%","x":"80px","y":"250px"},"ver":"270520c210519","z":"100","dis":false,"tt":"","a":{"form id":"modelForm","form key":"BatteryLower","label text":"Battery Lower","color":"grey"},"ev":{}},"modelIconUrlInput":{"t":"Input","lX":80,"lY":310,"sX":3,"sY":1,"s":"Edit Model","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"10%","x":"80px","y":"310px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modelForm","form key":"IconURL","label text":"Icon Url","color":"grey"},"ev":{}},"Input#10":{"t":"Input","lX":85,"lY":130,"sX":5.5,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"NOVERT","width":"550px","height":"11%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modalTypeForm","form key":"Question1","required":"true","label text":"Question 1","color":"grey"},"ev":{}},"Input#11":{"t":"Input","lX":90,"lY":185,"sX":5.5,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"NOVERT","width":"550px","height":"11%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modalTypeForm","form key":"Question2","required":"true","label text":"Question 2","color":"grey"},"ev":{}},"Input#12":{"t":"Input","lX":90,"lY":245,"sX":5.5,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"NOVERT","width":"550px","height":"11%","x":"80px","y":"100px"},"ver":"270520c210519","dis":false,"tt":"","a":{"form id":"modalTypeForm","form key":"Question3","required":"true","label text":"Question 3","color":"grey"},"ev":{}},"BarcodeScanner#0":{"t":"BarcodeScanner","lX":1385,"lY":80,"sX":5,"sY":4.12,"s":"QA Dashboard","ps":{"enabled":false,"scalingType":"OK","width":"26.71%","height":"59.03%","x":"73.99%","y":"9.61%"},"ver":"190104c210519","dis":false,"tt":"","a":{},"ev":{"clientEvents":{"inputEvents":{"stopQaDeviceScanner":{"channel":"stopQaDeviceScanner/deactivate","event":"deactivate","important":"false"},"qaDeviceScan":{"channel":"qaDeviceScan/activate","event":"activate","important":"false"}},"outputEvents":{"qaDeviceDetected":{"channel":"qaDeviceDetected/receive value","event":"Detected","trigger":"Detected","important":"false"}}}}},"Button#0":{"t":"Button","lX":333,"lY":83,"sX":0.94,"sY":0.7,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"6%","height":"4.63%","x":"18%","y":"10%"},"ver":"190104c210519","vis":false,"dis":false,"tt":"","a":{"button name":"Press"},"ev":{"clientEvents":{"outputEvents":{"testPubChannel":{"channel":"testPubChannel/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Scripting#3":{"t":"Scripting","lX":660,"lY":15,"sX":1,"sY":1,"s":"QA Dashboard","ps":{"enabled":false,"scalingType":"OK","width":"8.41%","height":"18.87%","x":"38.69%","y":"1.89%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description:\n * Create Author/Date:\n * Modified Author/Date Date:\n * Version:\n */\n\nvar deviceNumber;\nvar deviceId;\nlet reportObj = {};\nlet p4LoadCell;\nlet p5LoadCell;\nlet p1LoadCell;\nlet p2LoadCell;\nlet rebaitRange;\nvar deviceData;\n/**\n * Initialise script state (run once at startup)\n */\nScript.on(\"load\", function () {\n\n    Database.readRecords(\"rodent\", \"Devices\", (data) => {\n        deviceData = SensaCollection.load(data.value);\n        //console.log(\"Data is \" + JSON.stringify(deviceData, null, 4));\n\n    });\n  Script.disableWidget(\"qaFinishButton\");\n});\n\nScript.on(\"server\", function (eventData, channel) {\n  var channelData = channel.split(\"/\");\n  var category = channelData[0].toUpperCase();\n  var className = channelData[1].toUpperCase();\n  var instance = parseInt(channelData[2]);\n  var scope = channelData[3].toUpperCase();\n  var value = eventData.value;\n\n  if (\n    category !== \"RODENTS\" ||\n    className !== \"QA\" ||\n    instance !== deviceNumber\n  ) {\n    return;\n  }\n\n  switch (scope) {\n    case \"REGIONCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"regionCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"regionPassColor\", \"green\");\n        reportObj.regionCheck = true;\n      } else {\n        ClientEvents.publish(\"regionFailColor\", \"red\");\n        reportObj.regionCheck = false;\n      }\n      break;\n    case \"BATTERYCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"batteryCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"batteryPassColor\", \"green\");\n        reportObj.batteryCheck = true;\n      } else {\n        ClientEvents.publish(\"batteryFailColor\", \"red\");\n        reportObj.batteryCheck = false;\n      }\n      break;\n    case \"TILTCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"tiltCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"tiltPassColor\", \"green\");\n        reportObj.tiltCheck = true;\n      } else {\n        ClientEvents.publish(\"tiltFailColor\", \"red\");\n        reportObj.tiltCheck = false;\n      }\n      break;\n    // case \"LOADCELLCHECK\":\n    //   console.log(\"Region Check == \" + value);\n    //   if (parseInt(value) == 1) {\n    //     ClientEvents.publish(\"loadPassColor\", \"green\");\n    //     reportObj.loadCellCheck = true;\n    //   } else {\n    //     ClientEvents.publish(\"loadFailColor\", \"red\");\n    //     reportObj.loadCellCheck = false;\n    //   }\n    //   break;\n    case \"IRLEFTCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"irLeftCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"leftIRPassColor\", \"green\");\n        reportObj.irLeftCheck = true;\n      } else {\n        ClientEvents.publish(\"leftIRFailColor\", \"red\");\n        reportObj.irLeftCheck = false;\n      }\n      break;\n    case \"IRRIGHTCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"irRightCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"rightIRPassColor\", \"green\");\n        reportObj.irRightCheck = true;\n      } else {\n        ClientEvents.publish(\"rightIRFailColor\", \"red\");\n        reportObj.irRightCheck = false;\n      }\n      break;\n    // case \"WEIGHTDROPCHECK\":\n    //   console.log(\"Region Check == \" + value);\n    //   if (parseInt(value) == 1) {\n    //     ClientEvents.publish(\"weightDropPassColor\", \"green\");\n    //     reportObj.weightDropCheck = true;\n    //   } else {\n    //     ClientEvents.publish(\"weightDropFailColor\", \"red\");\n    //     reportObj.weightDropCheck = false;\n    //   }\n    //   break;\n    case \"P8CHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"p8Check\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"p8PassColor\", \"green\");\n        reportObj.p8Check = true;\n        calculateOverallReport();\n      } else {\n        ClientEvents.publish(\"p8FailColor\", \"red\");\n        reportObj.p8Check = false;\n        calculateOverallReport();\n      }\n      break;\n    case \"P1LOADCELL\":\n      p1LoadCell = parseInt(value);\n      break;\n    case \"P2LOADCELL\":\n      if (reportObj.hasOwnProperty(\"loadCellCheck\")) {\n        return;\n      }\n      p2LoadCell = parseInt(value);\n      if (!p1LoadCell) break;\n      const range = p2LoadCell - p1LoadCell;\n      rebaitRange = range / 111.1;\n      //const rebaitRange = calculateRebaitRange(p1LoadCell,p2LoadCell);\n      if (rebaitRange >= 4000 && rebaitRange <= 5000) {\n        ClientEvents.publish(\"loadPassColor\", \"green\");\n        reportObj.loadCellCheck = true;\n      } else {\n        ClientEvents.publish(\"loadFailColor\", \"red\");\n        reportObj.loadCellCheck = false;\n      }\n      break;\n    case \"P4LOADCELL\":\n      if (p4LoadCell !== undefined) {\n        return;\n      }\n      p4LoadCell = parseInt(value);\n      break;\n    case \"P5LOADCELL\":\n      if (reportObj.hasOwnProperty(\"weightDropCheck\")) {\n        return;\n      }\n      p5LoadCell = parseInt(value);\n      console.log(\"p5 load cell: \" + p5LoadCell);\n      const p5Range = p4LoadCell - p5LoadCell;\n      console.log(\"p5 range: \" + p5Range);\n      console.log(\"rebait range: \" + rebaitRange);\n      const weightDropRebaitRange = p5Range / rebaitRange;\n      console.log(\"p5 weight drop range: \" + weightDropRebaitRange);\n      if (weightDropRebaitRange >= 48 && weightDropRebaitRange <= 52) {\n        ClientEvents.publish(\"weightDropPassColor\", \"green\");\n        reportObj.weightDropCheck = true;\n      } else {\n        ClientEvents.publish(\"weightDropFailColor\", \"red\");\n        reportObj.weightDropCheck = false;\n      }\n      break;\n  }\n});\n\nClientEvents.subscribe(\"deviceInput\", function (eventData) {\n  deviceNumber = parseInt(eventData.value);\n  var channelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"Enabled\",\n    label: \"number\",\n    value: \"1\",\n  };\n  Script.publishToChannel(channelObj);\n});\nfunction calculateOverallReport() {\n  const {\n    turnOnLed,\n    regionCheck,\n    batteryCheck,\n    tiltCheck,\n    buttonPressLed,\n    loadCellCheck,\n    irLeftCheck,\n    irRightCheck,\n    weightDropCheck,\n    turnOffLed,\n    p8Check,\n  } = reportObj;\n  if (\n    turnOnLed !== undefined &&\n    regionCheck !== undefined &&\n    batteryCheck !== undefined &&\n    tiltCheck !== undefined &&\n    buttonPressLed !== undefined &&\n    loadCellCheck !== undefined &&\n    irLeftCheck !== undefined &&\n    irRightCheck !== undefined &&\n    weightDropCheck !== undefined &&\n    turnOffLed !== undefined &&\n    p8Check !== undefined\n  ) {\n    Script.enableWidget(\"qaFinishButton\");\n    const failValues = [];\n    Object.keys(reportObj).forEach((id) => {\n      if (!reportObj[id]) {\n        failValues.push({});\n      }\n    });\n    if (failValues.length > 0) {\n      ClientEvents.publish(\"overallFailColor\", \"red\");\n      reportObj.overallResult = false;\n    } else {\n      ClientEvents.publish(\"overallPassColor\", \"green\");\n      reportObj.overallResult = true;\n    }\n  }\n}\n\nClientEvents.subscribe(\"testPubChannel\", function (EventData) {\n  var channelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"Enabled\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var p1LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P1LOADCELL\",\n    label: \"number\",\n    value: \"50000\",\n  };\n  var p2LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P2LOADCELL\",\n    label: \"number\",\n    value: \"600000\",\n  };\n  var p5LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P5LOADCELL\",\n    label: \"number\",\n    value: \"6000\",\n  };\n  var p4LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P4LOADCELL\",\n    label: \"number\",\n    value: \"400\",\n  };\n  Script.publishToChannel(channelObj);\n  var channelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"REGIONCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var batteryChannelObj = {\n    category: \"Rodents\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"BATTERYCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var tiltChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"TILTCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var loadChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"LOADCELLCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var IRLeftChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"IRLEFTCHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var IRRightChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"IRRIGHTCHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var weightDropChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"WEIGHTDROPCHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var p8ChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P8CHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  Script.publishToChannel(channelObj);\n  Script.publishToChannel(batteryChannelObj);\n  Script.publishToChannel(tiltChannelObj);\n  Script.publishToChannel(loadChannelObj);\n  Script.publishToChannel(IRLeftChannelObj);\n  Script.publishToChannel(IRRightChannelObj);\n  Script.publishToChannel(weightDropChannelObj);\n  Script.publishToChannel(p8ChannelObj);\n  Script.publishToChannel(p2LoadCellObj);\n  Script.publishToChannel(p1LoadCellObj);\n  Script.publishToChannel(p4LoadCellObj);\n  Script.publishToChannel(p5LoadCellObj);\n});\n\nClientEvents.subscribe(\"onLedPass\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm\", { ledFail: false });\n    reportObj.turnOnLed = true;\n    ClientEvents.publish(\"ledFailRed\", \"\");\n    ClientEvents.publish(\"ledPassGreen\", \"green\");\n  } else {\n    Script.setForm(\"qaForm\", { ledFail: true });\n    reportObj.turnOnLed = false;\n    ClientEvents.publish(\"ledFailRed\", \"red\");\n    ClientEvents.publish(\"ledPassGreen\", \"\");\n    calculateOverallReport();\n  }\n});\n\nClientEvents.subscribe(\"onLedFail\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm\", { ledPass: false });\n    reportObj.turnOnLed = false;\n    ClientEvents.publish(\"ledFailRed\", \"red\");\n    ClientEvents.publish(\"ledPassGreen\", \"\");\n    calculateOverallReport();\n  } else {\n    Script.setForm(\"qaForm\", { ledPass: true });\n    reportObj.turnOnLed = true;\n    ClientEvents.publish(\"ledFailRed\", \"\");\n    ClientEvents.publish(\"ledPassGreen\", \"green\");\n  }\n});\n\nClientEvents.subscribe(\"onPressLedPass\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm\", { pressLedFail: false });\n    reportObj.buttonPressLed = true;\n    ClientEvents.publish(\"pressLedFailRed\", \"\");\n    ClientEvents.publish(\"pressLedPassGreen\", \"green\");\n  } else {\n    Script.setForm(\"qaForm\", { pressLedFail: true });\n    reportObj.buttonPressLed = false;\n    ClientEvents.publish(\"pressLedFailRed\", \"red\");\n    ClientEvents.publish(\"pressLedPassGreen\", \"\");\n    calculateOverallReport();\n  }\n});\n\nClientEvents.subscribe(\"onPressLedFail\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm\", { pressLedPass: false });\n    reportObj.buttonPressLed = false;\n    ClientEvents.publish(\"pressLedFailRed\", \"red\");\n    ClientEvents.publish(\"pressLedPassGreen\", \"\");\n    calculateOverallReport();\n  } else {\n    Script.setForm(\"qaForm\", { pressLedPass: true });\n    reportObj.buttonPressLed = true;\n    ClientEvents.publish(\"pressLedFailRed\", \"\");\n    ClientEvents.publish(\"pressLedPassGreen\", \"green\");\n  }\n});\n\nClientEvents.subscribe(\"onTurnOffLedPass\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm\", { turnOffLedFail: false });\n    reportObj.turnOffLed = true;\n    ClientEvents.publish(\"turnOffLedRed\", \"\");\n    ClientEvents.publish(\"turnOffLedGreen\", \"green\");\n  } else {\n    Script.setForm(\"qaForm\", { turnOffLedFail: true });\n    reportObj.turnOffLed = false;\n    ClientEvents.publish(\"turnOffLedRed\", \"red\");\n    ClientEvents.publish(\"turnOffLedGreen\", \"\");\n    calculateOverallReport();\n  }\n});\n\nClientEvents.subscribe(\"onTurnOffLedFail\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm\", { turnOffLedPass: false });\n    reportObj.turnOffLed = false;\n    ClientEvents.publish(\"turnOffLedRed\", \"red\");\n    ClientEvents.publish(\"turnOffLedGreen\", \"\");\n    calculateOverallReport();\n  } else {\n    Script.setForm(\"qaForm\", { turnOffLedPass: true });\n    reportObj.turnOffLed = true;\n    ClientEvents.publish(\"turnOffLedRed\", \"\");\n    ClientEvents.publish(\"turnOffLedGreen\", \"green\");\n  }\n});\n\nClientEvents.subscribe(\"qaDeviceDetected\", function (data) {\n  const formNumber = Script.getState(\"qaFormNumber\");\n  if (formNumber !== \"1\") return;\n  var res = data.value.split(\",\");\n  const device = {\n    model: res[0],\n    deviceId: res[1],\n  };\n  var findDev = 0;\n  deviceNumber = parseInt(device.deviceId);\n  for(var id in deviceData.data) {\n      \n    if(deviceNumber == deviceData.data[id][21] && deviceData.data[id][92] == 4) {\n        findDev = 1;\n        break;\n    }\n  }\n  if(findDev == 0) {\n\n    Client.alert(\"The device does not exist!\");\n    return;\n}\n  \n  ClientEvents.publish(\"setQaDeviceNumber\", deviceNumber);\n  Script.setForm(\"qaForm\", { deviceNumber: deviceNumber });\n  updateQaFlag(deviceNumber, \"1\");\n  ClientEvents.publish(\"stopQaDeviceScanner\", \"\");\n});\n\nClientEvents.subscribe(\"startQaScan\", function (data) {\n  Script.setState(\"qaFormNumber\", \"1\");\n  ClientEvents.publish(\"qaDeviceScan\", \"\", false);\n});\n\nfunction updateQaFlag(deviceNumber, isQAEnabled) {\n  Database.readRecords(\n    \"rodent\",\n    \"Devices\",\n    function (eventData) {\n      let collection = SensaCollection.load(eventData.value);\n      const device = collection.getFirst();\n      if (device) {\n        if (isQAEnabled === \"1\") {\n          if (device.ActivationStatus !== \"2\") {\n            ClientEvents.publish(\"setQaDeviceNumber\", \"----------------\");\n            Script.setForm(\"qaForm\", { deviceNumber: '' });\n            Client.alert(\"This Device is not ready for QA!\");\n            return;\n          }\n        }\n        const dbVal = {};\n        deviceId = device.Id;\n        dbVal[device.Id] = {\n          Id: `${device.Id}`,\n          IsQAEnabled: isQAEnabled,\n        };\n        Database.updateRecord(\"rodent\", \"Devices\", dbVal);\n      }\n    },\n    {\n      filter: `DeviceNumber='${deviceNumber}'`,\n    }\n  );\n}\n\nClientEvents.subscribe(\"qaFinish\", function (eventData) {\n  updateQaFlag(deviceNumber, \"0\");\n  Database.readRecords(\"rodent\", \"QaLogs\", function (eventData) {\n    let collection = SensaCollection.load(eventData.value);\n    const keys = Object.keys(collection.data);\n    const id = keys.length > 0 ? parseInt(keys[keys.length - 1]) + 1 : 1;\n    const dbVal = {};\n    dbVal[id] = {\n      Id: `${id}`,\n      DeviceId: deviceId,\n      TurnOnLEDCheck: reportObj.turnOnLed ? \"Pass\" : \"Fail\",\n      RegionCheck: reportObj.regionCheck ? \"Pass\" : \"Fail\",\n      BatteryCheck: reportObj.batteryCheck ? \"Pass\" : \"Fail\",\n      TiltCheck: reportObj.tiltCheck ? \"Pass\" : \"Fail\",\n      ButtonPressLED: reportObj.buttonPressLed ? \"Pass\" : \"Fail\",\n      LoadCellCheck: reportObj.loadCellCheck ? \"Pass\" : \"Fail\",\n      LefIRCheck: reportObj.irLeftCheck ? \"Pass\" : \"Fail\",\n      RightIRCheck: reportObj.irRightCheck ? \"Pass\" : \"Fail\",\n      WeightDropCheck: reportObj.weightDropCheck ? \"Pass\" : \"Fail\",\n      TurnOffLEDCheck: reportObj.turnOffLed ? \"Pass\" : \"Fail\",\n      TurnOffP8Check: reportObj.p8Check ? \"Pass\" : \"Fail\",\n      OverallResult: reportObj.overallResult ? \"Pass\" : \"Fail\",\n    };\n    Database.createRecords(\"rodent\", \"QaLogs\", dbVal, function () {});\n    deviceNumber = null;\n    deviceId = null;\n    reportObj = {};\n    p4LoadCell = undefined;\n  });\n  Script.clearForm(\"qaForm\");\n  ClientEvents.publish(\"setQaDeviceNumber\", \"----------------\");\n  ClientEvents.publish(\"regionPassColor\", \"white\");\n  ClientEvents.publish(\"regionFailColor\", \"white\");\n  ClientEvents.publish(\"batteryPassColor\", \"white\");\n  ClientEvents.publish(\"batteryFailColor\", \"white\");\n  ClientEvents.publish(\"tiltPassColor\", \"white\");\n  ClientEvents.publish(\"tiltFailColor\", \"white\");\n  ClientEvents.publish(\"loadPassColor\", \"white\");\n  ClientEvents.publish(\"loadFailColor\", \"white\");\n  ClientEvents.publish(\"leftIRPassColor\", \"white\");\n  ClientEvents.publish(\"leftIRFailColor\", \"white\");\n  ClientEvents.publish(\"rightIRPassColor\", \"white\");\n  ClientEvents.publish(\"rightIRFailColor\", \"white\");\n  ClientEvents.publish(\"weightDropPassColor\", \"white\");\n  ClientEvents.publish(\"weightDropFailColor\", \"white\");\n  ClientEvents.publish(\"p8PassColor\", \"white\");\n  ClientEvents.publish(\"p8FailColor\", \"white\");\n  ClientEvents.publish(\"overallFailColor\", \"white\");\n  ClientEvents.publish(\"overallPassColor\", \"white\");\n  ClientEvents.publish(\"ledFailRed\", \"\");\n  ClientEvents.publish(\"ledPassGreen\", \"\");\n  ClientEvents.publish(\"pressLedFailRed\", \"\");\n  ClientEvents.publish(\"pressLedPassGreen\", \"\");\n  ClientEvents.publish(\"turnOffLedRed\", \"\");\n  ClientEvents.publish(\"turnOffLedGreen\", \"\");\n});"},"ev":{"serverEvents":{"inputEvents":{"New Event #1":{"channel":"$DB/ADMIN/MANAGE/REQUEST","event":"feed","important":"false"},"New Event #2":{"channel":"Rodents/QA/+/+","event":"feed","important":"false"}}}}},"Label#0":{"t":"Label","lX":924,"lY":147,"sX":0.63,"sY":0.96,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"3.99%","height":"3.44%","x":"60%","y":"18%"},"ver":"200124c210519","dis":false,"tt":"","a":{"font size":"14","label text":"Pass"},"ev":{}},"Label#1":{"t":"Label","lX":480,"lY":147,"sX":0.63,"sY":1.06,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"4%","height":"3.8%","x":"66%","y":"18%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"Fail"},"ev":{}},"Label#2":{"t":"Label","lX":35,"lY":200,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"42%","y":"24%"},"ver":"200124c210519","dis":false,"tt":"","a":{"font size":"14","label text":"1. Turn On LED................................"},"ev":{}},"Label#3":{"t":"Label","lX":38,"lY":246,"sX":2.2,"sY":0.86,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.08%","x":"42%","y":"30%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"2. Region Check..............................."},"ev":{}},"Label#4":{"t":"Label","lX":38,"lY":294,"sX":2.2,"sY":0.96,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.44%","x":"42%","y":"36%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"3. Battery Check.............................."},"ev":{}},"Label#5":{"t":"Label","lX":38,"lY":344,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"42%","y":"42%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"4. Tilt Check......................................"},"ev":{}},"Label#6":{"t":"Label","lX":38,"lY":393,"sX":2.2,"sY":0.86,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.08%","x":"42%","y":"48%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"5. Button Press Led........................."},"ev":{}},"Label#7":{"t":"Label","lX":776,"lY":441,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"42%","y":"54%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"6. Load Cell Check..........................."},"ev":{}},"Input#14":{"t":"Input","lX":1071,"lY":188,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"4%","height":"6.41%","x":"58%","y":"23%"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm2","form key":"ledPass"},"ev":{"clientEvents":{"inputEvents":{"ledPassGreen2":{"channel":"ledPassGreen2/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onLedPass2":{"channel":"onLedPass2/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Input#15":{"t":"Input","lX":1182,"lY":188,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"4%","height":"6.41%","x":"64%","y":"23%"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm2","form key":"ledFail"},"ev":{"clientEvents":{"inputEvents":{"ledFailRed2":{"channel":"ledFailRed2/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onLedFail2":{"channel":"onLedFail2/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Icon#3":{"t":"Icon","lX":1109,"lY":237,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"29%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"regionPassColor2":{"channel":"regionPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#4":{"t":"Icon","lX":1218,"lY":237,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"29%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"regionFailColor2":{"channel":"regionFailColor2/set color","event":"set color","important":"false"}}}}},"Icon#5":{"t":"Icon","lX":1109,"lY":287,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"35%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"batteryPassColor2":{"channel":"batteryPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#6":{"t":"Icon","lX":1218,"lY":287,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"35%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"batteryFailColor2":{"channel":"batteryFailColor2/set color","event":"set color","important":"false"}}}}},"Icon#7":{"t":"Icon","lX":1109,"lY":335,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"41%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"tiltPassColor2":{"channel":"tiltPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#8":{"t":"Icon","lX":1218,"lY":335,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"41%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"tiltFailColor2":{"channel":"tiltFailColor2/set color","event":"set color","important":"false"}}}}},"Input#16":{"t":"Input","lX":1071,"lY":384,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"58%","y":"47%"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm2","form key":"pressLedPass"},"ev":{"clientEvents":{"inputEvents":{"pressLedPassGreen2":{"channel":"pressLedPassGreen2/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onPressLedPass2":{"channel":"onPressLedPass2/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Input#17":{"t":"Input","lX":1182,"lY":384,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"64%","y":"47%"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm2","form key":"pressLedFail"},"ev":{"clientEvents":{"inputEvents":{"pressLedFailRed2":{"channel":"pressLedFailRed2/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onPressLedFail2":{"channel":"onPressLedFail2/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Icon#9":{"t":"Icon","lX":1109,"lY":434,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"53%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"loadPassColor2":{"channel":"loadPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#10":{"t":"Icon","lX":1218,"lY":434,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"53%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"loadFailColor2":{"channel":"loadFailColor2/set color","event":"set color","important":"false"}}}}},"Label#8":{"t":"Label","lX":38,"lY":491,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"42%","y":"60%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"7. Left IR Check................................"},"ev":{}},"Icon#11":{"t":"Icon","lX":1109,"lY":483,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"59%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"leftIRPassColor2":{"channel":"leftIRPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#12":{"t":"Icon","lX":1218,"lY":483,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"59%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"leftIRFailColor2":{"channel":"leftIRFailColor2/set color","event":"set color","important":"false"}}}}},"Label#9":{"t":"Label","lX":38,"lY":540,"sX":2.2,"sY":0.89,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.2%","x":"42%","y":"66%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"8. Right IR Check.............................."},"ev":{}},"Icon#13":{"t":"Icon","lX":1109,"lY":531,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"65%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"rightIRPassColor2":{"channel":"rightIRPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#14":{"t":"Icon","lX":1218,"lY":531,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"65%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"rightIRFailColor2":{"channel":"rightIRFailColor2/set color","event":"set color","important":"false"}}}}},"Label#10":{"t":"Label","lX":38,"lY":588,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"42%","y":"72%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"9. Weight Drop Check....................."},"ev":{}},"Icon#15":{"t":"Icon","lX":1109,"lY":581,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"71%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"weightDropPassColor2":{"channel":"weightDropPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#16":{"t":"Icon","lX":1218,"lY":581,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"71%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"weightDropFailColor2":{"channel":"weightDropFailColor2/set color","event":"set color","important":"false"}}}}},"Label#11":{"t":"Label","lX":38,"lY":638,"sX":2.2,"sY":0.86,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.08%","x":"42%","y":"78%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"10. Turn Off Led Check..................."},"ev":{}},"Input#18":{"t":"Input","lX":1071,"lY":630,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"58%","y":"77%"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm2","form key":"turnOffLedPass"},"ev":{"clientEvents":{"inputEvents":{"turnOffLedGreen2":{"channel":"turnOffLedGreen2/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onTurnOffLedPass2":{"channel":"onTurnOffLedPass2/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Input#19":{"t":"Input","lX":1182,"lY":630,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"64%","y":"77%"},"ver":"270520c210519","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm2","form key":"turnOffLedFail"},"ev":{"clientEvents":{"inputEvents":{"turnOffLedRed2":{"channel":"turnOffLedRed2/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onTurnOffLedFail2":{"channel":"onTurnOffLedFail2/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Label#12":{"t":"Label","lX":38,"lY":687,"sX":2.2,"sY":0.89,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.2%","x":"42%","y":"84%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"11. Turn Off P8 Check....................."},"ev":{}},"Icon#17":{"t":"Icon","lX":1109,"lY":678,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"83%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"p8PassColor2":{"channel":"p8PassColor2/set color","event":"set color","important":"false"}}}}},"Icon#18":{"t":"Icon","lX":1218,"lY":678,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"83%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"p8FailColor2":{"channel":"p8FailColor2/set color","event":"set color","important":"false"}}}}},"Label#13":{"t":"Label","lX":776,"lY":761,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"42%","y":"93%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"12. Overall Result............................"},"ev":{}},"Icon#19":{"t":"Icon","lX":369,"lY":752,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"92%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"overallPassColor":{"channel":"overallPassColor/set color","event":"set color","important":"false"}}}}},"Icon#20":{"t":"Icon","lX":1218,"lY":752,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"66%","y":"92%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"overallFailColor2":{"channel":"overallFailColor2/set color","event":"set color","important":"false"}}}}},"Label#14":{"t":"Label","lX":150,"lY":50,"sX":1.58,"sY":1.19,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"10.09%","height":"4.27%","x":"8%","y":"6%"},"ver":"200124c210519","dis":false,"tt":"","a":{"font size":"14","label text":"<font size=\"5\">---------------------</font>"},"ev":{"clientEvents":{"inputEvents":{"setQaDeviceNumber":{"channel":"setQaDeviceNumber/receive value","event":"receive value","important":"false"}}}}},"Button#2":{"t":"Button","lX":167,"lY":98,"sX":1.12,"sY":0.78,"s":"QA Dashboard","ps":{"enabled":false,"scalingType":"OK","width":"6%","height":"4.27%","x":"9%","y":"12%"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Scan","color":"orange strong"},"ev":{"clientEvents":{"outputEvents":{"startQaScan":{"channel":"startQaScan/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Label#15":{"t":"Label","lX":942,"lY":50,"sX":1.58,"sY":1.06,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"10.09%","height":"3.8%","x":"51%","y":"6%"},"ver":"200124c210519","dis":false,"tt":"","a":{"font size":"14","label text":"<font size=\"5\">---------------------</font>"},"ev":{"clientEvents":{"inputEvents":{"setQaDeviceNumber2":{"channel":"setQaDeviceNumber2/receive value","event":"receive value","important":"false"}}}}},"Button#1":{"t":"Button","lX":960,"lY":98,"sX":0.94,"sY":0.65,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"6%","height":"4.27%","x":"52%","y":"12%"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Scan","color":"orange strong"},"ev":{"clientEvents":{"outputEvents":{"startQaScan2":{"channel":"startQaScan2/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Label#16":{"t":"Label","lX":31,"lY":164,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"2%","y":"24%"},"ver":"200124c210519","dis":false,"tt":"","a":{"font size":"14","label text":"1. Turn On LED................................"},"ev":{}},"Label#17":{"t":"Label","lX":384,"lY":162,"sX":0.63,"sY":0.96,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"3.99%","height":"3.44%","x":"20%","y":"18%"},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"font size":"14","label text":"Pass"},"ev":{}},"Label#18":{"t":"Label","lX":495,"lY":162,"sX":0.63,"sY":1.06,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"4%","height":"3.8%","x":"26%","y":"18%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"Fail"},"ev":{}},"Input#13":{"t":"Input","lX":348,"lY":203,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"4%","height":"6.41%","x":"18%","y":"23%"},"ver":"270520c210519","z":"120","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm","form key":"ledPass"},"ev":{"clientEvents":{"inputEvents":{"ledPassGreen":{"channel":"ledPassGreen/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onLedPass":{"channel":"onLedPass/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Input#20":{"t":"Input","lX":443,"lY":188,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"4%","height":"6.41%","x":"24%","y":"23%"},"ver":"270520c210519","z":"120","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm","form key":"ledFail"},"ev":{"clientEvents":{"inputEvents":{"ledFailRed":{"channel":"ledFailRed/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onLedFail":{"channel":"onLedFail/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Label#19":{"t":"Label","lX":31,"lY":205,"sX":2.2,"sY":0.86,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.08%","x":"2%","y":"30%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"2. Region Check..............................."},"ev":{}},"Icon#21":{"t":"Icon","lX":384,"lY":252,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"29%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"regionPassColor":{"channel":"regionPassColor/set color","event":"set color","important":"false"}}}}},"Icon#22":{"t":"Icon","lX":495,"lY":252,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"29%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"regionFailColor":{"channel":"regionFailColor/set color","event":"set color","important":"false"}}}}},"Label#20":{"t":"Label","lX":53,"lY":309,"sX":2.2,"sY":0.96,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.44%","x":"2%","y":"36%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"3. Battery Check.............................."},"ev":{}},"Icon#23":{"t":"Icon","lX":384,"lY":302,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"35%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"batteryPassColor":{"channel":"batteryPassColor/set color","event":"set color","important":"false"}}}}},"Icon#24":{"t":"Icon","lX":495,"lY":302,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"35%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"batteryFailColor":{"channel":"batteryFailColor/set color","event":"set color","important":"false"}}}}},"Label#21":{"t":"Label","lX":38,"lY":344,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"2%","y":"42%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"4. Tilt Check......................................"},"ev":{}},"Icon#25":{"t":"Icon","lX":384,"lY":350,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"41%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"tiltPassColor":{"channel":"tiltPassColor/set color","event":"set color","important":"false"}}}}},"Icon#26":{"t":"Icon","lX":495,"lY":350,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"41%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"tiltFailColor":{"channel":"tiltFailColor/set color","event":"set color","important":"false"}}}}},"Label#22":{"t":"Label","lX":38,"lY":393,"sX":2.2,"sY":0.86,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.08%","x":"2%","y":"48%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"5. Button Press Led........................."},"ev":{}},"Input#21":{"t":"Input","lX":348,"lY":399,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"18%","y":"47%"},"ver":"270520c210519","z":"120","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm","form key":"pressLedPass"},"ev":{"clientEvents":{"inputEvents":{"pressLedPassGreen":{"channel":"pressLedPassGreen/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onPressLedPass":{"channel":"onPressLedPass/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Input#22":{"t":"Input","lX":458,"lY":399,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"24%","y":"47%"},"ver":"270520c210519","z":"120","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm","form key":"pressLedFail"},"ev":{"clientEvents":{"inputEvents":{"pressLedFailRed":{"channel":"pressLedFailRed/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onPressLedFail":{"channel":"onPressLedFail/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Label#23":{"t":"Label","lX":53,"lY":456,"sX":2.2,"sY":0.96,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.44%","x":"2%","y":"54%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"6. Load Cell Check..........................."},"ev":{}},"Label#24":{"t":"Label","lX":53,"lY":506,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"2%","y":"60%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"7. Left IR Check................................"},"ev":{}},"Label#25":{"t":"Label","lX":53,"lY":555,"sX":2.2,"sY":0.89,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.2%","x":"2%","y":"66%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"8. Right IR Check.............................."},"ev":{}},"Label#26":{"t":"Label","lX":53,"lY":603,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"2%","y":"72%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"9. Weight Drop Check....................."},"ev":{}},"Label#27":{"t":"Label","lX":53,"lY":653,"sX":2.2,"sY":0.86,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.08%","x":"2%","y":"78%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"10. Turn Off Led Check..................."},"ev":{}},"Label#28":{"t":"Label","lX":53,"lY":702,"sX":2.2,"sY":0.89,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.2%","x":"2%","y":"84%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"11. Turn Off P8 Check....................."},"ev":{}},"Label#29":{"t":"Label","lX":53,"lY":776,"sX":2.2,"sY":0.99,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"14%","height":"3.56%","x":"2%","y":"93%"},"ver":"200124c210519","z":"100","dis":false,"tt":"","a":{"font size":"14","label text":"12. Overall Result............................"},"ev":{}},"Icon#27":{"t":"Icon","lX":384,"lY":449,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"53%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"loadPassColor":{"channel":"loadPassColor/set color","event":"set color","important":"false"}}}}},"Icon#28":{"t":"Icon","lX":384,"lY":498,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"59%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"leftIRPassColor":{"channel":"leftIRPassColor/set color","event":"set color","important":"false"}}}}},"Icon#29":{"t":"Icon","lX":369,"lY":531,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"65%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"rightIRPassColor":{"channel":"rightIRPassColor/set color","event":"set color","important":"false"}}}}},"Icon#30":{"t":"Icon","lX":384,"lY":596,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"71%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"weightDropPassColor":{"channel":"weightDropPassColor/set color","event":"set color","important":"false"}}}}},"Input#23":{"t":"Input","lX":348,"lY":645,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"18%","y":"77%"},"ver":"270520c210519","z":"120","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm","form key":"turnOffLedPass"},"ev":{"clientEvents":{"inputEvents":{"turnOffLedGreen":{"channel":"turnOffLedGreen/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onTurnOffLedPass":{"channel":"onTurnOffLedPass/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Icon#31":{"t":"Icon","lX":369,"lY":678,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"20%","y":"83%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"p8PassColor":{"channel":"p8PassColor/set color","event":"set color","important":"false"}}}}},"Icon#32":{"t":"Icon","lX":1109,"lY":752,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"60%","y":"92%"},"ver":"200628c210519","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"overallPassColor2":{"channel":"overallPassColor2/set color","event":"set color","important":"false"}}}}},"Icon#33":{"t":"Icon","lX":495,"lY":449,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"53%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"loadFailColor":{"channel":"loadFailColor/set color","event":"set color","important":"false"}}}}},"Icon#34":{"t":"Icon","lX":495,"lY":498,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"59%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"leftIRFailColor":{"channel":"leftIRFailColor/set color","event":"set color","important":"false"}}}}},"Icon#35":{"t":"Icon","lX":495,"lY":546,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"65%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"rightIRFailColor":{"channel":"rightIRFailColor/set color","event":"set color","important":"false"}}}}},"Icon#36":{"t":"Icon","lX":495,"lY":596,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"71%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"weightDropFailColor":{"channel":"weightDropFailColor/set color","event":"set color","important":"false"}}}}},"Input#24":{"t":"Input","lX":458,"lY":645,"sX":0.63,"sY":1,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOVERT","width":"3.99%","height":"6.29%","x":"24%","y":"77%"},"ver":"270520c210519","z":"120","dis":false,"tt":"","a":{"type":"checkbox","form id":"qaForm","form key":"turnOffLedFail"},"ev":{"clientEvents":{"inputEvents":{"turnOffLedRed":{"channel":"turnOffLedRed/change checkbox color","event":"change checkbox color","important":"false"}},"outputEvents":{"onTurnOffLedFail":{"channel":"onTurnOffLedFail/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Icon#37":{"t":"Icon","lX":495,"lY":693,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"83%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"p8FailColor":{"channel":"p8FailColor/set color","event":"set color","important":"false"}}}}},"Icon#38":{"t":"Icon","lX":495,"lY":767,"sX":0.71,"sY":0.71,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"NOHORIZ,NOVERT","width":"2.27%","height":"4.98%","x":"26%","y":"92%"},"ver":"200628c210519","z":"120","dis":false,"tt":"","a":{"action":"toggle","icon file":"circle-fill","outline color":"no outline","hover":"white","color":"white"},"ev":{"clientEvents":{"inputEvents":{"overallFailColor":{"channel":"overallFailColor/set color","event":"set color","important":"false"}}}}},"Scripting#5":{"t":"Scripting","lX":1195,"lY":25,"sX":1,"sY":1,"s":"QA Dashboard","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description:\n * Create Author/Date:\n * Modified Author/Date Date:\n * Version:\n */\n\nvar deviceNumber;\nvar deviceId;\nlet reportObj = {};\nlet p4LoadCell;\nlet p5LoadCell;\nlet p1LoadCell;\nlet p2LoadCell;\nlet rebaitRange;\nvar deviceData;\n\n/**\n * Initialise script state (run once at startup)\n */\nScript.on(\"load\", function () {\n\n    Database.readRecords(\"rodent\", \"Devices\", (data) => {\n        deviceData = SensaCollection.load(data.value);\n        //console.log(\"Data is \" + JSON.stringify(deviceData, null, 4));\n\n    });\n\n  Script.disableWidget(\"qaFinishButton2\");\n});\n\nScript.on(\"server\", function (eventData, channel) {\n  var channelData = channel.split(\"/\");\n  var category = channelData[0].toUpperCase();\n  var className = channelData[1].toUpperCase();\n  var instance = parseInt(channelData[2]);\n  var scope = channelData[3].toUpperCase();\n  var value = eventData.value;\n  debugger;\n\n  if (\n    category !== \"RODENTS\" ||\n    className !== \"QA\" ||\n    instance !== deviceNumber\n  ) {\n    return;\n  }\n\n  switch (scope) {\n    case \"REGIONCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"regionCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"regionPassColor2\", \"green\");\n        reportObj.regionCheck = true;\n      } else {\n        ClientEvents.publish(\"regionFailColor2\", \"red\");\n        reportObj.regionCheck = false;\n      }\n      break;\n    case \"BATTERYCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"batteryCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"batteryPassColor2\", \"green\");\n        reportObj.batteryCheck = true;\n      } else {\n        ClientEvents.publish(\"batteryFailColor2\", \"red\");\n        reportObj.batteryCheck = false;\n      }\n      break;\n    case \"TILTCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"tiltCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"tiltPassColor2\", \"green\");\n        reportObj.tiltCheck = true;\n      } else {\n        ClientEvents.publish(\"tiltFailColor2\", \"red\");\n        reportObj.tiltCheck = false;\n      }\n      break;\n    // case \"LOADCELLCHECK\":\n    //   console.log(\"Region Check == \" + value);\n    //   if (parseInt(value) == 1) {\n    //     ClientEvents.publish(\"loadPassColor2\", \"green\");\n    //     reportObj.loadCellCheck = true;\n    //   } else {\n    //     ClientEvents.publish(\"loadFailColor2\", \"red\");\n    //     reportObj.loadCellCheck = false;\n    //   }\n    //   break;\n    case \"IRLEFTCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"irLeftCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"leftIRPassColor2\", \"green\");\n        reportObj.irLeftCheck = true;\n      } else {\n        ClientEvents.publish(\"leftIRFailColor2\", \"red\");\n        reportObj.irLeftCheck = false;\n      }\n      break;\n    case \"IRRIGHTCHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"irRightCheck\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"rightIRPassColor2\", \"green\");\n        reportObj.irRightCheck = true;\n      } else {\n        ClientEvents.publish(\"rightIRFailColor\", \"red\");\n        reportObj.irRightCheck = false;\n      }\n      break;\n    // case \"WEIGHTDROPCHECK\":\n    //   console.log(\"Region Check == \" + value);\n    //   if (parseInt(value) == 1) {\n    //     ClientEvents.publish(\"weightDropPassColor2\", \"green\");\n    //     reportObj.weightDropCheck = true;\n    //   } else {\n    //     ClientEvents.publish(\"weightDropFailColor2\", \"red\");\n    //     reportObj.weightDropCheck = false;\n    //   }\n    //   break;\n    case \"P8CHECK\":\n      console.log(\"Region Check == \" + value);\n      if (reportObj.hasOwnProperty(\"p8Check\")) {\n        return;\n      }\n      if (parseInt(value) == 1) {\n        ClientEvents.publish(\"p8PassColor2\", \"green\");\n        reportObj.p8Check = true;\n        calculateOverallReport();\n      } else {\n        ClientEvents.publish(\"p8FailColor2\", \"red\");\n        reportObj.p8Check = false;\n        calculateOverallReport();\n      }\n      break;\n    case \"P1LOADCELL\":\n      p1LoadCell = parseInt(value);\n      break;\n    case \"P2LOADCELL\":\n      if (reportObj.hasOwnProperty(\"loadCellCheck\")) {\n        return;\n      }\n      p2LoadCell = parseInt(value);\n      if (!p1LoadCell) break;\n      const range = p2LoadCell - p1LoadCell;\n      rebaitRange = range / 111.1;\n      //const rebaitRange = calculateRebaitRange(p1LoadCell,p2LoadCell);\n      if (rebaitRange >= 4000 && rebaitRange <= 5000) {\n        ClientEvents.publish(\"loadPassColor2\", \"green\");\n        reportObj.loadCellCheck = true;\n      } else {\n        ClientEvents.publish(\"loadFailColor2\", \"red\");\n        reportObj.loadCellCheck = false;\n      }\n      break;\n    case \"P4LOADCELL\":\n      if (p4LoadCell !== undefined) {\n        return;\n      }\n      p4LoadCell = parseInt(value);\n      break;\n    case \"P5LOADCELL\":\n      if (reportObj.hasOwnProperty(\"weightDropCheck\")) {\n        return;\n      }\n      p5LoadCell = parseInt(value);\n      console.log(\"p5 load cell: \" + p5LoadCell);\n      const p5Range = p4LoadCell - p5LoadCell;\n      console.log(\"p5 range: \" + p5Range);\n      console.log(\"rebait range: \" + rebaitRange);\n      const weightDropRebaitRange = p5Range / rebaitRange;\n      console.log(\"p5 weight drop range: \" + weightDropRebaitRange);\n      if (weightDropRebaitRange >= 48 && weightDropRebaitRange <= 52) {\n        ClientEvents.publish(\"weightDropPassColor2\", \"green\");\n        reportObj.weightDropCheck = true;\n      } else {\n        ClientEvents.publish(\"weightDropFailColor2\", \"red\");\n        reportObj.weightDropCheck = false;\n      }\n      break;\n  }\n});\n\nClientEvents.subscribe(\"deviceInput\", function (eventData) {\n  deviceNumber = parseInt(eventData.value);\n  var channelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"Enabled\",\n    label: \"number\",\n    value: \"1\",\n  };\n  Script.publishToChannel(channelObj);\n});\nfunction calculateOverallReport() {\n  const {\n    turnOnLed,\n    regionCheck,\n    batteryCheck,\n    tiltCheck,\n    buttonPressLed,\n    loadCellCheck,\n    irLeftCheck,\n    irRightCheck,\n    weightDropCheck,\n    turnOffLed,\n    p8Check,\n  } = reportObj;\n  if (\n    turnOnLed !== undefined &&\n    regionCheck !== undefined &&\n    batteryCheck !== undefined &&\n    tiltCheck !== undefined &&\n    buttonPressLed !== undefined &&\n    loadCellCheck !== undefined &&\n    irLeftCheck !== undefined &&\n    irRightCheck !== undefined &&\n    weightDropCheck !== undefined &&\n    turnOffLed !== undefined &&\n    p8Check !== undefined\n  ) {\n    Script.enableWidget(\"qaFinishButton2\");\n    const failValues = [];\n    Object.keys(reportObj).forEach((id) => {\n      if (!reportObj[id]) {\n        failValues.push({});\n      }\n    });\n    if (failValues.length > 0) {\n      ClientEvents.publish(\"overallFailColor2\", \"red\");\n      reportObj.overallResult = false;\n    } else {\n      ClientEvents.publish(\"overallPassColor2\", \"green\");\n      reportObj.overallResult = true;\n    }\n  }\n}\n\nClientEvents.subscribe(\"testPubChannel\", function (EventData) {\n  var channelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"Enabled\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var p1LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P1LOADCELL\",\n    label: \"number\",\n    value: \"50000\",\n  };\n  var p2LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P2LOADCELL\",\n    label: \"number\",\n    value: \"600000\",\n  };\n  var p5LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P5LOADCELL\",\n    label: \"number\",\n    value: \"6000\",\n  };\n  var p4LoadCellObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P4LOADCELL\",\n    label: \"number\",\n    value: \"400\",\n  };\n  Script.publishToChannel(channelObj);\n  var channelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"REGIONCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var batteryChannelObj = {\n    category: \"Rodents\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"BATTERYCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var tiltChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"TILTCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var loadChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"LOADCELLCHECK\",\n    label: \"number\",\n    value: \"0\",\n  };\n  var IRLeftChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"IRLEFTCHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var IRRightChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"IRRIGHTCHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var weightDropChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"WEIGHTDROPCHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  var p8ChannelObj = {\n    category: \"RODENTS\",\n    className: \"QA\",\n    instance: deviceNumber.toString(),\n    scope: \"P8CHECK\",\n    label: \"number\",\n    value: \"1\",\n  };\n  Script.publishToChannel(channelObj);\n  Script.publishToChannel(batteryChannelObj);\n  Script.publishToChannel(tiltChannelObj);\n  Script.publishToChannel(loadChannelObj);\n  Script.publishToChannel(IRLeftChannelObj);\n  Script.publishToChannel(IRRightChannelObj);\n  Script.publishToChannel(weightDropChannelObj);\n  Script.publishToChannel(p8ChannelObj);\n  Script.publishToChannel(p2LoadCellObj);\n  Script.publishToChannel(p1LoadCellObj);\n  Script.publishToChannel(p4LoadCellObj);\n  Script.publishToChannel(p5LoadCellObj);\n});\n\nClientEvents.subscribe(\"onLedPass2\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm2\", { ledFail: false });\n    reportObj.turnOnLed = true;\n    ClientEvents.publish(\"ledFailRed2\", \"\");\n    ClientEvents.publish(\"ledPassGreen2\", \"green\");\n  } else {\n    Script.setForm(\"qaForm2\", { ledFail: true });\n    reportObj.turnOnLed = false;\n    ClientEvents.publish(\"ledFailRed2\", \"red\");\n    ClientEvents.publish(\"ledPassGreen2\", \"\");\n    calculateOverallReport();\n  }\n});\n\nClientEvents.subscribe(\"onLedFail2\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm2\", { ledPass: false });\n    reportObj.turnOnLed = false;\n    ClientEvents.publish(\"ledFailRed2\", \"red\");\n    ClientEvents.publish(\"ledPassGreen2\", \"\");\n    calculateOverallReport();\n  } else {\n    Script.setForm(\"qaForm2\", { ledPass: true });\n    reportObj.turnOnLed = true;\n    ClientEvents.publish(\"ledFailRed2\", \"\");\n    ClientEvents.publish(\"ledPassGreen2\", \"green\");\n  }\n});\n\nClientEvents.subscribe(\"onPressLedPass2\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm2\", { pressLedFail: false });\n    reportObj.buttonPressLed = true;\n    ClientEvents.publish(\"pressLedFailRed2\", \"\");\n    ClientEvents.publish(\"pressLedPassGreen2\", \"green\");\n  } else {\n    Script.setForm(\"qaForm2\", { pressLedFail: true });\n    reportObj.buttonPressLed = false;\n    ClientEvents.publish(\"pressLedFailRed2\", \"red\");\n    ClientEvents.publish(\"pressLedPassGreen2\", \"\");\n    calculateOverallReport();\n  }\n});\n\nClientEvents.subscribe(\"onPressLedFail2\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm2\", { pressLedPass: false });\n    reportObj.buttonPressLed = false;\n    ClientEvents.publish(\"pressLedFailRed2\", \"red\");\n    ClientEvents.publish(\"pressLedPassGreen2\", \"\");\n    calculateOverallReport();\n  } else {\n    Script.setForm(\"qaForm2\", { pressLedPass: true });\n    reportObj.buttonPressLed = true;\n    ClientEvents.publish(\"pressLedFailRed2\", \"\");\n    ClientEvents.publish(\"pressLedPassGreen2\", \"green\");\n  }\n});\n\nClientEvents.subscribe(\"onTurnOffLedPass2\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm2\", { turnOffLedFail: false });\n    reportObj.turnOffLed = true;\n    ClientEvents.publish(\"turnOffLedRed2\", \"\");\n    ClientEvents.publish(\"turnOffLedGreen2\", \"green\");\n  } else {\n    Script.setForm(\"qaForm2\", { turnOffLedFail: true });\n    reportObj.turnOffLed = false;\n    ClientEvents.publish(\"turnOffLedRed2\", \"red\");\n    ClientEvents.publish(\"turnOffLedGreen2\", \"\");\n    calculateOverallReport();\n  }\n});\n\nClientEvents.subscribe(\"onTurnOffLedFail2\", function (eventData) {\n  if (eventData.value) {\n    Script.setForm(\"qaForm2\", { turnOffLedPass: false });\n    reportObj.turnOffLed = false;\n    ClientEvents.publish(\"turnOffLedRed2\", \"red\");\n    ClientEvents.publish(\"turnOffLedGreen2\", \"\");\n    calculateOverallReport();\n  } else {\n    Script.setForm(\"qaForm2\", { turnOffLedPass: true });\n    reportObj.turnOffLed = true;\n    ClientEvents.publish(\"turnOffLedRed2\", \"\");\n    ClientEvents.publish(\"turnOffLedGreen2\", \"green\");\n  }\n});\n\nClientEvents.subscribe(\"qaDeviceDetected\", function (data) {\n  const formNumber = Script.getState(\"qaFormNumber\");\n  //debugger;\n  if (formNumber !== \"2\") return;\n  var res = data.value.split(\",\");\n  const device = {\n    model: res[0],\n    deviceId: res[1],\n  };\n  var findDev = 0;\n\n  \n  deviceNumber = parseInt(device.deviceId);\n\n  for(var id in deviceData.data) {\n      \n     if(deviceNumber == deviceData.data[id][21] && deviceData.data[id][92] == 4) {\n         findDev = 1;\n         break;\n     }\n   }\n\nif(findDev == 0) {\n\n    Client.alert(\"The device does not exist!\");\n    return;\n}\n  ClientEvents.publish(\"setQaDeviceNumber2\", deviceNumber);\n  Script.setForm(\"qaForm2\", { deviceNumber: deviceNumber });\n  updateQaFlag(deviceNumber, \"1\");\n  ClientEvents.publish(\"stopQaDeviceScanner\", \"\");\n});\n\nClientEvents.subscribe(\"startQaScan2\", function (data) {\n  Script.setState(\"qaFormNumber\", \"2\");\n  ClientEvents.publish(\"qaDeviceScan\", \"\", false);\n});\n\nfunction updateQaFlag(deviceNumber, isQAEnabled) {\n  Database.readRecords(\n    \"rodent\",\n    \"Devices\",\n    function (eventData) {\n      let collection = SensaCollection.load(eventData.value);\n      const device = collection.getFirst();\n      if (device) {\n        if (isQAEnabled === \"1\") {\n          if (device.ActivationStatus !== \"2\") {\n            ClientEvents.publish(\"setQaDeviceNumber2\", \"----------------\");\n            Script.setForm(\"qaForm2\", { deviceNumber: '' });\n            Client.alert(\"This Device is not ready for QA!\");\n            return;\n          }\n        }\n        const dbVal = {};\n        deviceId = device.Id;\n        dbVal[device.Id] = {\n          Id: `${device.Id}`,\n          IsQAEnabled: isQAEnabled,\n        };\n        Database.updateRecord(\"rodent\", \"Devices\", dbVal);\n      }\n    },\n    {\n      filter: `DeviceNumber='${deviceNumber}'`,\n    }\n  );\n}\n\nClientEvents.subscribe(\"qaFinish2\", function (eventData) {\n  updateQaFlag(deviceNumber, \"0\");\n  Database.readRecords(\"rodent\", \"QaLogs\", function (eventData) {\n    let collection = SensaCollection.load(eventData.value);\n    const keys = Object.keys(collection.data);\n    const id = keys.length > 0 ? parseInt(keys[keys.length - 1]) + 1 : 1;\n    const dbVal = {};\n    dbVal[id] = {\n      Id: `${id}`,\n      DeviceId: deviceId,\n      TurnOnLEDCheck: reportObj.turnOnLed ? \"Pass\" : \"Fail\",\n      RegionCheck: reportObj.regionCheck ? \"Pass\" : \"Fail\",\n      BatteryCheck: reportObj.batteryCheck ? \"Pass\" : \"Fail\",\n      TiltCheck: reportObj.tiltCheck ? \"Pass\" : \"Fail\",\n      ButtonPressLED: reportObj.buttonPressLed ? \"Pass\" : \"Fail\",\n      LoadCellCheck: reportObj.loadCellCheck ? \"Pass\" : \"Fail\",\n      LefIRCheck: reportObj.irLeftCheck ? \"Pass\" : \"Fail\",\n      RightIRCheck: reportObj.irRightCheck ? \"Pass\" : \"Fail\",\n      WeightDropCheck: reportObj.weightDropCheck ? \"Pass\" : \"Fail\",\n      TurnOffLEDCheck: reportObj.turnOffLed ? \"Pass\" : \"Fail\",\n      TurnOffP8Check: reportObj.p8Check ? \"Pass\" : \"Fail\",\n      OverallResult: reportObj.overallResult ? \"Pass\" : \"Fail\",\n    };\n    Database.createRecords(\"rodent\", \"QaLogs\", dbVal, function () {});\n    deviceNumber = null;\n    deviceId = null;\n    reportObj = {};\n    p4LoadCell = undefined;\n  });\n  Script.clearForm(\"qaForm2\");\n  ClientEvents.publish(\"setQaDeviceNumber2\", \"----------------\");\n  ClientEvents.publish(\"regionPassColor2\", \"white\");\n  ClientEvents.publish(\"regionFailColor2\", \"white\");\n  ClientEvents.publish(\"batteryPassColor2\", \"white\");\n  ClientEvents.publish(\"batteryFailColor2\", \"white\");\n  ClientEvents.publish(\"tiltPassColor2\", \"white\");\n  ClientEvents.publish(\"tiltFailColor2\", \"white\");\n  ClientEvents.publish(\"loadPassColor2\", \"white\");\n  ClientEvents.publish(\"loadFailColor2\", \"white\");\n  ClientEvents.publish(\"leftIRPassColor2\", \"white\");\n  ClientEvents.publish(\"leftIRFailColor2\", \"white\");\n  ClientEvents.publish(\"rightIRPassColor2\", \"white\");\n  ClientEvents.publish(\"rightIRFailColor\", \"white\");\n  ClientEvents.publish(\"weightDropPassColor2\", \"white\");\n  ClientEvents.publish(\"weightDropFailColor2\", \"white\");\n  ClientEvents.publish(\"p8PassColor2\", \"white\");\n  ClientEvents.publish(\"p8FailColor2\", \"white\");\n  ClientEvents.publish(\"overallFailColor2\", \"white\");\n  ClientEvents.publish(\"overallPassColor2\", \"white\");\n  ClientEvents.publish(\"ledFailRed2\", \"\");\n  ClientEvents.publish(\"ledPassGreen2\", \"\");\n  ClientEvents.publish(\"pressLedFailRed2\", \"\");\n  ClientEvents.publish(\"pressLedPassGreen2\", \"\");\n  ClientEvents.publish(\"turnOffLedRed2\", \"\");\n  ClientEvents.publish(\"turnOffLedGreen2\", \"\");\n});"},"ev":{"serverEvents":{"inputEvents":{"New Event #1":{"channel":"$DB/ADMIN/MANAGE/REQUEST","event":"feed","important":"false"},"New Event #2":{"channel":"Rodents/QA/+/+","event":"feed","important":"false"}}}}},"qaFinishButton2":{"t":"Button","lX":1127,"lY":810,"sX":0.94,"sY":0.7,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"6%","height":"4.63%","x":"61%","y":"99%"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Finish","color":"orange strong"},"ev":{"clientEvents":{"outputEvents":{"qaFinish2":{"channel":"qaFinish2/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"qaFinishButton":{"t":"Button","lX":389,"lY":810,"sX":0.94,"sY":0.7,"s":"QA Dashboard","ps":{"enabled":true,"scalingType":"OK","width":"6%","height":"4.63%","x":"21%","y":"99%"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Finish","color":"orange strong"},"ev":{"clientEvents":{"outputEvents":{"qaFinish":{"channel":"qaFinish/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Container#9":{"t":"Container","lX":40,"lY":40,"sX":16.63,"sY":8.74,"s":"MAC Address","ps":{"enabled":"true","scalingType":"OK","width":"100% - 80px","height":"100%","x":"40px","y":"40px"},"ver":"190104c210519","z":"100","dis":false,"tt":"","a":{"color":"grey","title":"MAC Address Processing"},"ev":{}},"BarcodeScanner#1":{"t":"BarcodeScanner","lX":625,"lY":70,"sX":3.5,"sY":4,"s":"MAC Address","ps":{"enabled":"true","scalingType":"OK","width":"350px","height":"400px","x":"50%  - 160px","y":"70px"},"ver":"190104c210519","dis":false,"tt":"","a":{},"ev":{"clientEvents":{"inputEvents":{"start":{"channel":"start/activate","event":"activate","important":"false"}},"outputEvents":{"detected":{"channel":"detected/receive value","event":"Detected","trigger":"Detected","important":"false"}}}}},"Scripting#6":{"t":"Scripting","lX":1050,"lY":455,"sX":1,"sY":1,"s":"MAC Address","ps":{"enabled":"false","scalingType":"OK","width":"6.38%","height":"13.33%","x":"49.74%","y":"41.33%"},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n\n var deviceData;\n var devNumber = null;\n var devModel = \"Pestsense10\";\n const deviceFindButton = Script.getWidget(\"deviceFindButton\");\n Script.on('load', function() {\n     \n     deviceFindButton.subscribe(\"pressed\", ()=>{\n         \n         findDevice();\n     });\n     \n     ClientEvents.publish(\"start\", false);\n     \n     ClientEvents.subscribe(\"detected\", (data)=>{\n         var details = data.value.split(\",\");\n         devModel = details[0];\n         devNumber = details[1];\n         \n         ClientEvents.publish(\"setDevice\", devNumber, false);\n     });\n     \n     ClientEvents.subscribe(\"deviceFieldChanged\", (data)=>{\n         devNumber = data.value;\n \n         //ClientEvents.publish(\"setDevice\", devNumber, false);\n     });\n     \n     Database.readRecords(\"rodent\", \"Devices\", (data) => {\n          deviceData = SensaCollection.load(data.value);\n          \n  \n      });\n \n });\n \n \n function findDevice() {\n \n     console.log(\"number is \" + JSON.stringify(deviceData, null, 4));\n\t devNumber = devNumber.trim();\n\t if(devNumber == null || devNumber == \"\" || isNaN(devNumber)) {\n\t\t Client.alert(\"Enter a valid device Number\");\n\t\t return;\n\t }\n//isNaN(devNumber))\n\t var find = 0;\n\t var devId;\n\t for(var data in deviceData.data) {\n\t\t \n\t\t console.log(\"My dev \" + devNumber + \" tje \" + deviceData.data[data][21] + \" state \" + deviceData.data[data][92]);\n\t\t if(devNumber == deviceData.data[data][21]) {\n\t\t\t find = deviceData.data[data][92] == 0;\n\t\t\t devId = deviceData.data[data][0];\n\t\t\t break;\n\t\t }\n\t }\n\t var Sid = \"\";\n\t if(find) {\n\t\t var option = {};\n\t\t option.confirmText = \"Submit\";\n\t\t option.label = \"Enter Device ID\";\n\t\t option.type = \"string\";\n\t\t option.required = true;\n\n\t\t Client.prompt(\"\", \"Device Serial Identification\", option).then((data)=>{\n\t\t\t //console.log(\"Promise is \" + JSON.stringify(data, null, 4));\n\t\t\t Sid = data;\n\t\t\t \n\t\t\t \n\t\t\t  find = 0;\n\t\t\t if(devNumber == null || devNumber == \"\") {\n\t\t\t\t Client.alert(\"Enter a valid device Number\");\n\t\t\t\t return;\n\t\t\t }\n\n\t\t\t // finding Sid\n\t\t\t Sid = Sid + \"FFFF\";\n\t\t\t for(var data in deviceData.data) {\n\n\t\t\t\t //console.log(\"My dev \" + devNumber + \" tje \" + deviceData.data[data][21] + \" state \" + deviceData.data[data][92]);\n\t\t\t\t if(Sid == deviceData.data[data][20]) {\n\t\t\t\t\t find = 1;\n\t\t\t\t\t break;\n\t\t\t\t }\n\t\t\t }\n\n\t\t\t if(find) {\n\t\t\t\t   Client.alert(\"This Serial ID already Exists in the database\");\n\t\t\t\t   return;\n\n\t\t\t } else {\n\t\t\t\t var devData = {};\n\t\t\t\t devData.Id = devId;\n\t\t\t\t devData.Sid = Sid;\n\t\t\t\t devData.ActivationStatus = 1;\n\t\t\t\t Database.saveRecordParam(\"Rodent\", \"Devices\", {\n\t\t\t\t\t devId: devData\n\t\t\t\t }, ()=>{\n\t\t\t\t\t Client.alert(\"MAC Address Saved Successfully\");\n\t\t\t\t\t ClientEvents.publish(\"setDevice\", \"\", false);\n\t\t\t\t });\n\t\t\t }\n\n\t\t\t\t });\n\n\t \n\t } else {\n\t\t  Client.alert(\"The device is not ready for this step\");\n\t\t return;\n\t }\n\t\n }"},"ev":{}},"deviceFindButton":{"t":"Button","lX":506,"lY":600,"sX":4.5,"sY":1.09,"s":"MAC Address","ps":{"enabled":"true","scalingType":"OK","width":"450px","height":"50px","x":"50%  - 270px","y":"600px"},"ver":"190104c210519","dis":false,"tt":"","a":{"color":"orange strong","button name":"Submit"},"ev":{}},"findDeviceInput":{"t":"Input","lX":596,"lY":550,"sX":3,"sY":1,"s":"MAC Address","ps":{"enabled":"true","scalingType":"NOVERT","width":"300px","height":"7.07%","x":"50%  - 180px","y":"550px"},"ver":"270520c210519","dis":false,"tt":"","a":{},"ev":{"clientEvents":{"inputEvents":{"setDevice":{"channel":"setDevice/receive value","event":"receive value","important":"false"}},"outputEvents":{"deviceFieldChanged":{"channel":"deviceFieldChanged/receive value","event":"on change","trigger":"on change","important":"false"}}}}},"Label#31":{"t":"Label","lX":576,"lY":450,"sX":3,"sY":3.2,"s":"MAC Address","ps":{"enabled":"true","scalingType":"OK","width":"300px","height":"80px","x":"50% - 200px","y":"450px"},"ver":"200124c210519","dis":false,"tt":"","a":{"font size":"25","label text":"<b>Or</b>&nbsp;<div><b>type device number</b></div>","text align":"center"},"ev":{}},"Scripting#9":{"t":"Scripting","lX":180,"lY":495,"sX":1,"sY":1,"s":"Edit Product","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#10":{"t":"Scripting","lX":190,"lY":850,"sX":1,"sY":1,"s":"Manage Master Products","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#11":{"t":"Scripting","lX":200,"lY":790,"sX":1,"sY":1,"s":"User Roles","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#12":{"t":"Scripting","lX":180,"lY":405,"sX":1,"sY":1,"s":"Edit User Role","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#13":{"t":"Scripting","lX":150,"lY":830,"sX":1,"sY":1,"s":"Error Codes","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#14":{"t":"Scripting","lX":155,"lY":755,"sX":1,"sY":1,"s":"Edit Error Codes","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#15":{"t":"Scripting","lX":170,"lY":860,"sX":1,"sY":1,"s":"Manage Companies","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#16":{"t":"Scripting","lX":165,"lY":450,"sX":1,"sY":1,"s":"Edit Company","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#17":{"t":"Scripting","lX":145,"lY":900,"sX":1,"sY":1,"s":"Manage Model Types","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#18":{"t":"Scripting","lX":165,"lY":380,"sX":1,"sY":1,"s":"Edit Model Type","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#19":{"t":"Scripting","lX":170,"lY":845,"sX":1,"sY":1,"s":"Manage Device Models","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#20":{"t":"Scripting","lX":185,"lY":465,"sX":1,"sY":1,"s":"Edit Model","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#21":{"t":"Scripting","lX":160,"lY":805,"sX":1,"sY":1,"s":"Packet 6 Transactions","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#22":{"t":"Scripting","lX":165,"lY":850,"sX":1,"sY":1,"s":"Application Settings","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#23":{"t":"Scripting","lX":160,"lY":605,"sX":1,"sY":1,"s":"Edit Application Settings","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#24":{"t":"Scripting","lX":135,"lY":810,"sX":1,"sY":1,"s":"User Access Role","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#25":{"t":"Scripting","lX":180,"lY":715,"sX":1,"sY":1,"s":"Edit User Access Role","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}},"Scripting#26":{"t":"Scripting","lX":575,"lY":240,"sX":1,"sY":1,"s":"QA Dashboard","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n\tClient.setScreenVisible(\"Edit Product\", false);\r\n\tClient.setScreenVisible(\"Edit User Role\", false);\r\n\tClient.setScreenVisible(\"Edit Error Codes\", false);\r\n\tClient.setScreenVisible(\"Edit Company\", false);\r\n\tClient.setScreenVisible(\"Edit Application Settings\", false);\r\n\tClient.setScreenVisible(\"Edit Model Type\", false);\r\n\tClient.setScreenVisible(\"Edit Model\", false);\r\n\tClient.setScreenVisible(\"Edit User Access Role\", false);\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\tconsole.log(\"devadmin detected\");\r\n\t\treturn;\r\n\t}\r\n\tif (username.includes(\"grandtop\")) {\r\n\t\tconsole.log(\"grandtop detected\");\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t} else {\r\n\t\tconsole.log(\"regular user detected\");\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t}\r\n }"},"ev":{}},"Scripting#27":{"t":"Scripting","lX":1060,"lY":580,"sX":1,"sY":1,"s":"MAC Address","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","z":"120","dis":false,"tt":"","a":{"script type":"javascript","import file":"true","file name":"../../js/pestsense_scripts/appsettings_load_script.js","code editor":"Script.on('load', function() {\r\n    hideJumpScreens();\r\n});\r\n\r\n\r\nfunction hideJumpScreens() {\r\n\tvar username = Client.getUser();\r\n\tusername = \"user@basf.com\";\r\n\tvar currentScreen = Client.getCurrentScreenName();\r\n\tvar allScreenNames = Client.getAllScreenNames();\r\n\tconsole.log(allScreenNames);\r\n\t\r\n\tvar basfScreens = [\"Manage Products\", \"Edit Product\", \"User Access Role\", \"Edit User Access Role\"];\r\n\tvar grandtopScreens = [\"QA Dashboard\", \"MAC Address\"];\r\n\t\r\n\tif (username == \"devadmin@pestsense.com\") {\r\n\t\t// don't hide any screens or jump screens\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (username.includes(\"basf\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tconsole.log(screenName);\r\n\t\t\tif (!basfScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!basfScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(basfScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t\t\r\n\t} else if (username.includes(\"grandtop\")) {\r\n\t\t// hide each screen name if it doesn't exist in the user's screen list\r\n\t\tfor (var screenName in allScreenNames) {\r\n\t\t\tif (!grandtopScreens.includes(screenName)) {\r\n\t\t\t\tClient.setScreenVisible(screenName, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the current screen isn't in the user's screen list, jump to the first screen they are able to access.\r\n\t\tif (!grandtopScreens.includes(currentScreen)) {\r\n\t\t\tconst myTimeout = setTimeout(function(){Client.jumpToScreen(grandtopScreens[0]);}, 400);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n }"},"ev":{}}},"screens":{"Manage Products":{"index":0,"icon":"shopping_basket","meta":""},"Edit Product":{"index":1,"icon":"edit","meta":""},"Manage Master Products":{"index":2,"icon":"shopping_basket","meta":""},"User Roles":{"index":3,"icon":"verified_user","meta":""},"Edit User Role":{"index":4,"icon":"assignment_ind","meta":""},"Error Codes":{"index":5,"icon":"error","meta":""},"Edit Error Codes":{"index":6,"icon":"edit","meta":""},"Manage Companies":{"index":7,"icon":"business","meta":""},"Edit Company":{"index":8,"icon":"edit","meta":""},"Manage Model Types":{"index":9,"icon":"airplay","meta":""},"Edit Model Type":{"index":10,"icon":"create","meta":""},"Manage Device Models":{"index":11,"icon":"widgets","meta":""},"Edit Model":{"index":12,"icon":"mode_edit","meta":""},"Packet 6 Transactions":{"index":13,"icon":"data_usage","meta":""},"Application Settings":{"index":14,"icon":"widgets","meta":""},"Edit Application Settings":{"index":15,"icon":"create","meta":""},"User Access Role":{"index":16,"icon":"verified_user","meta":""},"Edit User Access Role":{"index":17,"icon":"mode_edit","meta":""},"QA Dashboard":{"index":18,"icon":"widgets","meta":""},"MAC Address":{"index":19,"icon":"widgets","meta":""}},"meta":""}